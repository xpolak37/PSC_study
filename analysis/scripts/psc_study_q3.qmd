---
title: "Mucosal microbiota alterations in primary sclerosis cholangitis persist after liver transplantation and are associated with clinical features independently of geography"
subtitle: "3. Hypothesis: PSC disease is associated with IBD"
format: 
  html:  
    embed-resources: true
    keep-md: false
    toc: true
    toc-expand: 3
    toc-depth: 6
    toc-location: left
    number-sections: true
    number-depth: 6
    code-fold: false
    code-tools: true
    code-summary: "Open code"
    grid: 
      body-width: 1000px
      sidebar-width: 600px
      margin-width: 100px
editor: source
project:
  type: default
  output-dir: output
fontsize: 12 px
---

-----------------------------------------------------------

# Introduction

## About

An IBD vs. no-IBD comparison was performed within PSC patients (pre-LTx and rPSC individuals combined) to discover IBD-specific pattern. 

**IBD vs no_IBD analysis on merged data**

-   Alpha diversity –\> group effect, country effect, interaction effect

-   Beta diversity – PERMANOVA, PCA -\> group effect, country effect,
    interaction effect

-   DAA -\>

    -   o Group effect – linDA + MaAsLin2 intersection

    -   o Country effect – – taxa with significant interaction effect were excluded based on individual post-hoc analysis. Taxa had to have the same direction in both countries 

**IBD vs no_IBD** – finding IBD-specific pattern in PSC patients

*Importing libraries and custom functions built for this analysis*

```{r, warning=FALSE}
source("custom_functions.R")
```

## Data Import

Importing ASV, taxa and metadata tables for both Czech and Norway
samples.

**Czech**

*MICROBIOME*

```{r, warning=FALSE}
path = "../../data/analysis_ready_data/ikem/"
asv_tab_ikem <- as.data.frame(fread(file.path(path,"asv_table_ikem.csv"),
                                    check.names = FALSE))
taxa_tab_ikem <- as.data.frame(fread(file.path(path,"taxa_table_ikem.csv"),
                                     check.names = FALSE))
metadata_ikem <- as.data.frame(fread(file.path(path,"metadata_ikem.csv"),
                                     check.names = FALSE))
```

*IBD info*

```{r, warning=FALSE}
path = "../../data/clinical_data/"
cz <- read.csv(file.path(path,"clinical_metadata_cz.csv")) %>% dplyr::select(SampleID,PatientID,PSC_IBD,Group)

cz$PatientID <- as.character(cz$PatientID)
metadata_ikem <- merge(metadata_ikem,cz,by=c("SampleID", "Group"),all=TRUE)
```

**Norway**

*MICROBIOME*

```{r, warning=FALSE}
path = "../../data/analysis_ready_data/norway/"
asv_tab_norway <- as.data.frame(fread(file.path(path,"asv_table_norway.csv"),
                                    check.names = FALSE))
taxa_tab_norway <- as.data.frame(fread(file.path(path,"taxa_table_norway.csv"),
                                    check.names = FALSE))
metadata_norway <- as.data.frame(fread(file.path(path,"metadata_norway.csv"),
                                    check.names = FALSE))
```

*IBD info*

```{r, warning=FALSE}
path = "../../data/clinical_data/"
no <- read.csv(file.path(path,"clinical_metadata_no.csv")) %>% dplyr::select(SampleID,subjectid,IBD, Group)

```

### Merging

**Merging clinical metadata**

```{r, warning=FALSE}
clinical_metadata <- bind_rows(
  cz %>% dplyr::mutate(PSC_IBD = case_when(
    PSC_IBD == "0" ~ "no_ibd",
    PSC_IBD == "1" ~ "ibd",
  )) %>% `colnames<-`(c("SampleID","PatientID","IBD","Group")),
  no %>% `colnames<-`(c("SampleID","PatientID","IBD","Group")) %>%
    mutate(PatientID=paste0("NO_",PatientID)))
```

**Terminal ileum**

```{r, warning=FALSE}
ileum_data <- merging_data(asv_tab_1=asv_tab_ikem,
                           asv_tab_2=asv_tab_norway,
                           taxa_tab_1=taxa_tab_ikem,
                           taxa_tab_2=taxa_tab_norway,
                           metadata_1=metadata_ikem,
                           metadata_2=metadata_norway,
                           segment="TI",Q="Q3")

ileum_asv_tab <- ileum_data[[1]]
ileum_taxa_tab <- ileum_data[[2]]
ileum_metadata <- ileum_data[[3]]

ileum_metadata <- merge(ileum_metadata,
                        clinical_metadata %>%
                          dplyr::select(-Group),
                        by=c("SampleID"), all.x = TRUE) %>%
  dplyr::select(-PatientID,Group) %>% 
  dplyr::mutate(Group=IBD) %>% dplyr::select(-IBD)
```

**Colon**

```{r, warning=FALSE}
colon_data <- merging_data(asv_tab_1=asv_tab_ikem,
                           asv_tab_2=asv_tab_norway,
                           taxa_tab_1=taxa_tab_ikem,
                           taxa_tab_2=taxa_tab_norway,
                           metadata_1=metadata_ikem,
                           metadata_2=metadata_norway,
                           segment="colon",Q="Q3")

colon_asv_tab <- colon_data[[1]]
colon_taxa_tab <- colon_data[[2]]
colon_metadata <- colon_data[[3]]

colon_metadata <- merge(colon_metadata,
                        clinical_metadata %>%
                          dplyr::select(-Group),
                        by=c("SampleID"), all.x = TRUE) %>%
  dplyr::select(-PatientID,Group) %>% 
  dplyr::mutate(Group=IBD) %>% dplyr::select(-IBD)
```


## Import clinical data

### CZ

```{r, warning=FALSE}
# clinical metadata
metadata_clinical <- read.csv("../../data/clinical_data/clinical_metadata_cz.csv")
metadata_clinical$PatientID <- as.character(metadata_clinical$PatientID)

# DYSBIOSIS
metadata_dysbiosis <- read.csv("../../data/clinical_data/dysbiosis_metadata.csv") %>%
  dplyr::filter(Country=="CZ")

# ALPHA DIVERSITY
metadata_alpha_ileum <- read.csv(
  "../results/Q1/alpha_diversity/alpha_indices_terminal_ileum.csv") %>%
  dplyr::filter(Country=="CZ")

metadata_alpha_colon <- read.csv(
  "../results/Q1/alpha_diversity/alpha_indices_colon.csv") %>%
  dplyr::filter(Country=="CZ")

metadata_alpha <- rbind(metadata_alpha_ileum,metadata_alpha_colon) %>%
  mutate(PatientID=Patient) %>%
  dplyr::select(-c(Patient, Group))

# MERGING
metadata_cz <- full_join(metadata_clinical, metadata_dysbiosis, by=c("SampleID","Matrix","PatientID","Group","Country"))

metadata_cz <- full_join(metadata_cz, metadata_alpha, by=c("SampleID","PatientID","Country"))

metadata_cz$Group <- factor(metadata_cz$Group,levels = c("healthy","pre_ltx","non-rPSC","rPSC"))
```

### NO

```{r, warning=FALSE}
# clinical metadata
metadata_clinical <- read.csv("../../data/clinical_data/clinical_metadata_no.csv")
metadata_clinical %<>% mutate(PatientID=subjectid,
                              Matrix=segment) %>%
  dplyr::select(-subjectid,-segment)
metadata_clinical$PatientID <- as.character(paste0("NO_",metadata_clinical$PatientID))

# DYSBIOSIS
metadata_dysbiosis <- read.csv("../../data/clinical_data/dysbiosis_metadata.csv") %>%
  dplyr::filter(Country=="NO")  %>%
  dplyr::select(-c(Patient))

# ALPHA DIVERSITY
metadata_alpha_ileum <- read.csv(
  "../results/Q1/alpha_diversity/alpha_indices_terminal_ileum.csv") %>%
  dplyr::filter(Country=="NO")

metadata_alpha_colon <- read.csv(
  "../results/Q1/alpha_diversity/alpha_indices_colon.csv") %>%
  dplyr::filter(Country=="NO")

metadata_alpha <- rbind(metadata_alpha_ileum,metadata_alpha_colon) %>%
  mutate(PatientID=Patient) %>%
  dplyr::select(-c(Patient, Group))

# MERGING
metadata_no <- full_join(metadata_clinical, metadata_dysbiosis, by=c("SampleID","Matrix","PatientID","Group","Country"))

metadata_no <- full_join(metadata_no, metadata_alpha, by=c("SampleID","PatientID","Country"))

metadata_no$Group <- factor(metadata_no$Group,levels = c("healthy","pre_ltx","non-rPSC","rPSC"))
```

### Merging metadata

```{r, warning=FALSE}
metadata_cz %<>% dplyr::mutate(Calprotectin=Fecal.calprotectin,
                             AOM=AOM_score,
                             APRI=APRI_score,
                             FIB4=FIB4_score) %>%
  dplyr::select(SampleID,Matrix,PatientID,Group,Country,Bilirubin,ALP,Calprotectin,
                MAYO_PSC,AOM,APRI,FIB4,Platelets,AST,Creatinine,
                Albumin,ALT,PSC_IBD,GGT,INR,Albumin,Nancy_max,eMAYO,MAYO_dai,
                dys_unfiltered_asv,dys_unfiltered_genus,
                dys_filtered_asv,dys_filtered_genus,
                Observe,Shannon,Simpson,Pielou)

metadata_no %<>% dplyr::mutate(Platelets=TRC,
                             Creatinine=Kreatinin,
                             MAYO_PSC=Mayo_score,
                             AST=ASAT/60,
                             ALT=ALAT/60,
                             PSC_IBD=IBD,
                             Bilirubin=Bilirubin*17.1,
                             ALP=ALP/60,
                             Albumin=Albumin*10) %>%
  dplyr::mutate(PSC_IBD = case_when(
      PSC_IBD == "no_ibd" ~ "0",
      PSC_IBD == "ibd" ~ "1",
      TRUE ~ Group  # Keep other values as is
    )) %>%
  dplyr::select(SampleID,Matrix,PatientID,Group,Country,Bilirubin,ALP,Calprotectin,
                MAYO_PSC,AOM,APRI,FIB4,Platelets,AST,Creatinine,
                Albumin,ALT,PSC_IBD,
                dys_unfiltered_asv,dys_unfiltered_genus,
                dys_filtered_asv,dys_filtered_genus,
                Observe,Shannon,Simpson,Pielou) 

metadata_final <- merge(metadata_cz,metadata_no,all = TRUE)
metadata_final$Calprotectin[metadata_final$Calprotectin==">6000"] <- 6000
metadata_final$Calprotectin <- as.numeric(metadata_final$Calprotectin)
```

## CHI SQUARE TEST

### pre_LTx, rPSC, non-rPSC

```{r, warning=FALSE}
cz <- cz %>% dplyr::group_by(PSC_IBD,Group) %>%
  distinct(PatientID, .keep_all = TRUE) %>%
  count() %>% drop_na() %>% 
  dplyr::mutate(PSC_IBD = case_when(
    PSC_IBD == "0" ~ "no_ibd",
    PSC_IBD == "1" ~ "ibd",
  )) %>% `colnames<-`(c("IBD","Group","n")) 

no <- no %>% dplyr::group_by(IBD,Group) %>%
  distinct(subjectid, .keep_all = TRUE) %>%
  count() %>% drop_na()

# Summarize by IBD and Group
data <- bind_rows(cz, no) %>%
  group_by(IBD, Group) %>%
  summarise(n = sum(n), .groups = "drop") %>%
  pivot_wider(names_from = Group, values_from = n) %>%
  column_to_rownames("IBD") %>%
  as.matrix()
    
chi_res <- chisq.test(data)
chi_res$expected
chi_res
```

### pre_LTx + rPSC (PSC patients), non-rPSC

```{r, warning=FALSE}
data2 <- data %>% as.data.frame() %>%
  dplyr::mutate(PSC=pre_ltx+rPSC) %>% 
  dplyr::select(PSC,`non-rPSC`) %>% as.matrix()

chi_res <- chisq.test(data2)
chi_res$expected
chi_res
```

### rPSC, non-rPSC

```{r, warning=FALSE}
data3 <- data %>% as.data.frame() %>%
  dplyr::select(rPSC,`non-rPSC`) %>% as.matrix()

chi_res <- chisq.test(data3)
chi_res$expected
chi_res
```

# Data Analysis - Terminal ileum

```{r, warning=FALSE}
segment="terminal_ileum"
```

## Filtering

Rules: 

  - sequencing depth \> 10000 
  
  - nearZeroVar() with default settings 

**Rarefaction Curve**

```{r, warning=FALSE}
path="../intermediate_files/rarecurves"
seq_depth_threshold <- 10000
```

```{r, eval = FALSE}
ps <- construct_phyloseq(ileum_asv_tab,ileum_taxa_tab,ileum_metadata)
rareres <- get_rarecurve(obj=ps, chunks=500)
save(rareres,file = file.path(path,"rarefaction_ileum.Rdata"))
```

```{r, warning=FALSE}
load(file.path(path,"rarefaction_ileum.Rdata"))

prare <- ggrarecurve(obj=rareres,
                      factorNames="Country",
                      indexNames=c("Observe")) + 
  theme_bw() +
  theme(axis.text=element_text(size=8), panel.grid=element_blank(),
        strip.background = element_rect(colour=NA,fill="grey"),
        strip.text.x = element_text(face="bold")) + 
  geom_vline(xintercept = seq_depth_threshold, 
             linetype="dashed", 
             color = "red") + 
  xlim(0, 20000)

prare
```

**Library size**

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE, warning=FALSE}
read_counts(ileum_asv_tab, line = c(5000,10000))
```

### Sequencing depth

```{r, warning=FALSE}
data_filt <- seq_depth_filtering(ileum_asv_tab,
                                 ileum_taxa_tab,
                                 ileum_metadata,
                                 seq_depth_threshold = 10000)

filt_ileum_asv_tab <- data_filt[[1]]; alpha_ileum_asv_tab <- filt_ileum_asv_tab
filt_ileum_taxa_tab <- data_filt[[2]]; alpha_ileum_taxa_tab <- filt_ileum_taxa_tab
filt_ileum_metadata <- data_filt[[3]]; alpha_ileum_metadata <- filt_ileum_metadata

seq_step <- dim(filt_ileum_asv_tab)[1]
```

**Library size**

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE, warning=FALSE}
read_counts(filt_ileum_asv_tab,line = c(5000,10000))
```

### NearZeroVar

```{r, warning=FALSE}
data_filt <- nearzerovar_filtering(filt_ileum_asv_tab, 
                                   filt_ileum_taxa_tab,
                                   filt_ileum_metadata)

filt_ileum_asv_tab <- data_filt[[1]]
filt_ileum_taxa_tab <- data_filt[[2]]
nearzero_step <- dim(filt_ileum_asv_tab)[1]
```

Library size

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE, warning=FALSE}
read_counts(filt_ileum_asv_tab,line = c(5000,10000))
```

### Final Counts

```{r, warning=FALSE}
final_counts_filtering(ileum_asv_tab,
                       filt_ileum_asv_tab,
                       filt_ileum_metadata,
                       seq_step, 0, nearzero_step) %>% `colnames<-`("Count")
```

## Alpha diversity

```{r, warning=FALSE}
path = "../results/Q3/alpha_diversity"
```

**Calculation**

```{r, warning=FALSE}
# Construct MPSE object
alpha_ileum_metadata$Sample <- alpha_ileum_metadata$SampleID
ileum_mpse <- as.MPSE(construct_phyloseq(alpha_ileum_asv_tab,
                                         alpha_ileum_taxa_tab,
                                         alpha_ileum_metadata))

ileum_mpse %<>% mp_rrarefy(raresize = 10000,seed = 123)

# Calculate alpha diversity - rarefied counts
ileum_mpse %<>% mp_cal_alpha(.abundance=RareAbundance, force=TRUE)
```

```{r, warning=FALSE}

alpha_div_plots <- list()

# preparing data frame
alpha_data <- data.frame(SampleID=ileum_mpse$Sample.x,
                         Observe=ileum_mpse$Observe,
                         Shannon=ileum_mpse$Shannon,
                         Simpson=ileum_mpse$Simpson,
                         Pielou=ileum_mpse$Pielou,
                         Group=ileum_mpse$Group,
                         Country=ileum_mpse$Country,
                         Patient=ileum_mpse$Patient)

write.csv(alpha_data,file.path(path,paste0("alpha_indices_",segment,".csv")),
          row.names = FALSE)
```

### Plots

```{r, fig.width=4, fig.height=5, fig.fullwidth=TRUE}
p_boxplot_alpha <- alpha_diversity_countries(alpha_data,show_legend = FALSE)

# save the results
alpha_div_plots[[paste(segment,"Country")]] <- p_boxplot_alpha

# see the results
p_boxplot_alpha
```

```{r,results='hide', echo=FALSE}
pdf("../figures/Q3/alpha_diversity_terminal_ileum.pdf",
    height =4,width = 6)
p_boxplot_alpha
dev.off()
```

### Linear Model

```{r, warning=FALSE}
path = "../results/Q3/alpha_diversity"
alpha_data <- read.csv(file.path(path,paste0("alpha_indices_",segment,".csv")))
```

**Richness**

```{r, warning=FALSE}
results_model <- pairwise.lm(formula = "Observe ~ Group * Country",
                             factors=alpha_data$Group,
                             data=alpha_data)

# check interaction
if (!is.data.frame(results_model)){
  results_model_observe <- results_model[[1]]
  results_model_observe_emeans <- results_model[[2]]
} else {
  results_model_observe <- results_model
  results_model_observe_emeans <- NA
}

# save the results
pc_observed <- list(); 
pc_observed[[segment]] <- results_model_observe
```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_observe,digits = 3,
caption = "Raw results of linear model of richness estimation.")

knitr::kable(results_model_observe_emeans,digits = 3,
caption = "Raw results of independent country analysis")
```

**Shannon**

```{r, warning=FALSE}
results_model <- pairwise.lm(formula = "Shannon ~ Group * Country",
                             factors=alpha_data$Group,
                             data=alpha_data)

# check interaction
if (!is.data.frame(results_model)){
  results_model_shannon <- results_model[[1]]
  results_model_shannon_emeans <- results_model[[2]]
} else {
  results_model_shannon <- results_model
  results_model_shannon_emeans <- NA
}

# save the results
pc_shannon <- list(); 
pc_shannon[[segment]] <- as.data.frame(results_model_shannon)

```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_shannon,digits = 3,
caption = "Raw results of linear model of Shannon estimation.")

knitr::kable(results_model_shannon_emeans,digits = 3,
caption = "Raw results of independent country analysis")
```

**Simpson**

```{r, warning=FALSE}
results_model <- pairwise.lm(formula = "Simpson ~ Group * Country",
                                     factors=alpha_data$Group,
                                     data=alpha_data)

# check interaction
if (!is.data.frame(results_model)){
  results_model_simpson <- results_model[[1]]
  results_model_simpson_emeans <- results_model[[2]]
} else {
  results_model_simpson <- results_model
  results_model_simpson_emeans <- NA
}


# save the results
pc_simpson <- list(); 
pc_simpson[[segment]] <- as.data.frame(results_model_simpson)
```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_simpson,digits = 3,
caption = "Raw results of linear model of Simpson estimation.")

knitr::kable(results_model_simpson_emeans,digits = 3,
caption = "Raw results of independent country analysis")
```

**Pielou**

```{r, warning=FALSE}
results_model <- pairwise.lm(formula = "Pielou ~ Group * Country",
                                     factors=alpha_data$Group,
                                     data=alpha_data)

# check interaction

if (!is.data.frame(results_model)){
  results_model_pielou <- results_model[[1]]
  results_model_pielou_emeans <- results_model[[2]]
} else {
  results_model_pielou <- results_model
  results_model_pielou_emeans <- NA
}

# save the results
pc_pielou <- list(); 
pc_pielou[[segment]] <- as.data.frame(results_model_pielou)
```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_pielou,digits = 3,
caption = "Raw results of linear model of Pielou estimation.")

knitr::kable(results_model_pielou_emeans,digits = 3,
caption = "Raw results of independent country analysis")
```

### Saving results

```{r, warning=FALSE}
alpha_list <- list(
  Richness=pc_observed[[segment]],
  Shannon=pc_shannon[[segment]])
                   
write.xlsx(alpha_list, 
           file = file.path(path,paste0("alpha_diversity_results_",segment,".xlsx")))
```


## Beta diversity

Calculating Aitchison distance (euclidean distance on clr-transformed
data), both at ASV and genus level.

### Main analysis

**Genus level, Aitchison distance**

```{r, warning=FALSE}
level="genus"
```

```{r, warning=FALSE}
path = "../results/Q3/beta_diversity"
```

```{r, warning=FALSE}
pairwise_aitchison_raw <- list()
pca_plots_list <- list()
```

Aggregation, filtering

```{r, warning=FALSE}
# Aggregation
genus_data <- aggregate_taxa(ileum_asv_tab,
                             ileum_taxa_tab,
                             taxonomic_level=level,
                             names=TRUE)
# Filtration
filt_data <- filtering_steps(genus_data[[1]],
                             genus_data[[2]],
                             ileum_metadata,
                             seq_depth_threshold=10000)

filt_ileum_genus_tab <- filt_data[[1]]
filt_ileum_genus_taxa <- filt_data[[2]]
filt_ileum_metadata <- filt_data[[3]]
```

##### PERMANOVA

```{r, warning=FALSE}
pairwise_df <- filt_ileum_genus_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,
                           filt_ileum_metadata$Group,
                           covariate = filt_ileum_metadata$Country, sim.method = "robust.aitchison", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, interaction = TRUE, sim.method = "robust.aitchison", p.adjust.m="BH")

# tidy the results
pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
pairwise_aitchison_raw[[paste(level, segment)]] <- rbind(pp_factor,pp_cov,pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.1]

if (length(interaction_sig)>0){
  for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_ileum_metadata$Group,
                      covariate = filt_ileum_metadata$Country, 
                      group1 = group1,
                      group2 = group2)
  print(result_list)
}
}

```

##### Plots

**PCA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_ileum_genus_tab,
                                 filt_ileum_genus_taxa,
                                 filt_ileum_metadata,
                                 show_boxplots = TRUE,
                                 variable = "Group", size=3, show_legend=FALSE)

# save the results
pca_plots_list[[paste(segment,level,"custom")]] <- p

# see the results
p
```

```{r,results='hide', echo=FALSE}
pdf("../figures/Q3/beta_diversity_terminal_ileum.pdf",
    height =5,width = 5)
p
dev.off()
```

#### PCA + correlations

```{r}
variables= c("Calprotectin","Nancy_max","eMAYO","MAYO_dai")
```

```{r}
metadata_clinical <- metadata_final
metadata_clinical$PatientID <- as.character(metadata_clinical$PatientID)

metadata_ileum_pca <- merge(filt_ileum_metadata,metadata_clinical[,c("SampleID",variables)],by="SampleID",all.x=TRUE) %>% dplyr::select(SampleID, Group, Country,variables) 

res <- pca_plot_corr(filt_ileum_genus_tab,
                     filt_ileum_genus_taxa,
                     filt_ileum_metadata,
                     show_boxplots = FALSE,
                     variable = "Group", size=3, 
                     segment=segment,
                     show_legend= TRUE,
                     clinical = TRUE, clinical_metadata = metadata_ileum_pca,
                     variables= c("Calprotectin","Nancy_max","eMAYO","MAYO_dai"))

res
```

**heatmap**

```{r}
df_heatmap <- melt(res[[4]] %>% rownames_to_column("SeqID") %>% 
                     mutate(PCo2=r) %>% select(SeqID,PCo2))
labels_df <- melt(res[[4]] %>% rownames_to_column("SeqID") %>% select(SeqID,p_adjusted))

labels <- labels_df
labels$variable <- "PCo2"
labels$value <- NA
labels$value[labels_df$value<=0.001] <- "***"
labels$value[labels_df$value<=0.01] <- "**"
labels$value[labels_df$value<=0.05] <- "*"

p_mdi_ileum <- ggplot() + 
  geom_tile(data=df_heatmap, aes(variable, SeqID, fill= value))  + 
  theme_minimal() + 
  scale_fill_gradient2(name = "Rho", low = "blue", mid = "white", high = "red", midpoint = 0,limits = c(-0.7, 0.7)) + 
  geom_text(data=labels,aes(x=variable,y=SeqID,label=value,vjust=0.6)) +
  xlab("") + ylab("")  

p_mdi_ileum
```

#### Saving results

```{r, warning=FALSE}
write.xlsx(pairwise_aitchison_raw[[paste(level, segment)]], 
           file = file.path(path,
           paste0("beta_diversity_results_", segment,".xlsx")))
```

### Supplementary analysis

```{r, warning=FALSE}
supplements_beta <- list()
```

#### Genus level

```{r, warning=FALSE}
level="genus"
```

##### Bray-Curtis

**PERMANOVA**

```{r, warning=FALSE}
pairwise_df <- filt_ileum_genus_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, sim.method = "bray", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, interaction = TRUE, sim.method = "bray", p.adjust.m="BH")

# tidy the results
pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("bray",level,segment)]] <- rbind(pp_factor,pp_cov,pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
  for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_ileum_metadata$Group,
                      covariate = filt_ileum_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'bray')
  print(result_list)
}
}


```

**Plots**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_ileum_genus_tab,
                                 filt_ileum_genus_taxa,
                                 filt_ileum_metadata,
                                 measure = "bray",
                                 show_boxplots = TRUE,
                                 variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA bray",level,segment)]] <- p

# see the results
p
```

##### Jaccard

**PERMANOVA**

```{r, warning=FALSE}
pairwise_df <- filt_ileum_genus_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, sim.method = "jaccard", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, interaction = TRUE, sim.method = "jaccard", p.adjust.m="BH")

# tidy the results
pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("jaccard",level,segment)]] <- rbind(pp_factor, pp_cov, pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_ileum_metadata$Group,
                      covariate = filt_ileum_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'jaccard')
  print(result_list)
}
}
```

**Plots**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_ileum_genus_tab,
                                 filt_ileum_genus_taxa,
                                 filt_ileum_metadata,
                                 measure = "jaccard",
                                 show_boxplots = TRUE,
                                 variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA jaccard",level,segment)]] <- p

# see the results
p
```

#### ASV level

```{r, warning=FALSE}
level="ASV"
```

##### Aitchison 

**PERMANOVA**

```{r, warning=FALSE}
# preparing data frame
pairwise_df <- filt_ileum_asv_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, sim.method = "robust.aitchison", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, interaction = TRUE, sim.method = "robust.aitchison", p.adjust.m="BH")

pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("aitchison",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_ileum_metadata$Group,
                      covariate = filt_ileum_metadata$Country, 
                      group1 = group1,
                      group2 = group2)
  print(result_list)
}
}
```

**PCoA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_ileum_asv_tab,
                           filt_ileum_taxa_tab,
                           filt_ileum_metadata,
                           show_boxplots = TRUE,
                           variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA aitchison",level,segment)]] <- p

# see the results
p
```

##### Bray-Curtis 

**PERMANOVA**

```{r, warning=FALSE}
# preparing data frame
pairwise_df <- filt_ileum_asv_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, sim.method = "bray", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, interaction = TRUE, sim.method = "bray", p.adjust.m="BH")

pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("bray",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)

```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_ileum_metadata$Group,
                      covariate = filt_ileum_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'bray')
  print(result_list)
}
}
```

**PCoA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_ileum_asv_tab,
                     filt_ileum_taxa_tab,
                     filt_ileum_metadata,
                     measure = "bray",
                     show_boxplots = TRUE,
                     variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA bray",level,segment)]] <- p

# see the results
p
```

##### Jaccard

**PERMANOVA**

```{r, warning=FALSE}
# preparing data frame
pairwise_df <- filt_ileum_asv_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, sim.method = "jaccard", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_ileum_metadata$Group,covariate = filt_ileum_metadata$Country, interaction = TRUE, sim.method = "jaccard", p.adjust.m="BH")

pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("jaccard",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_ileum_metadata$Group,
                      covariate = filt_ileum_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'jaccard')
  print(result_list)
}
}
```

**PCoA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_ileum_asv_tab,
                     filt_ileum_taxa_tab,
                     filt_ileum_metadata,
                     measure = "jaccard",
                     show_boxplots = TRUE,
                     variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA jaccard",level,segment)]] <- p

# see the results
p
```

#### Saving results

```{r, warning=FALSE}
write.xlsx(supplements_beta[!grepl("PCoA",names(supplements_beta))],
           file = file.path(path,
           paste0("supplements_beta_diversity_", segment,".xlsx")))
```

## Univariate Analysis

### Main analysis

```{r, warning=FALSE}
level="genus"
```

```{r, warning=FALSE}
# needed paths
path = "../results/Q3/univariate_analysis"
path_maaslin=file.path("../intermediate_files/maaslin/Q3",level)
```

```{r, warning=FALSE}
# variables
raw_linda_results_genus <- list();
raw_linda_results_genus[[segment]] <- list()
linda_results_genus <- list(); 
linda_results_genus[[segment]] <- list()

# country and interaction problems
list_intersections <- list()
list_venns <- list()
uni_statistics <- list()

# workbook for final df
wb <- createWorkbook()

# PSC effect
psc_effect <- list()
```

Aggregate taxa

```{r, warning=FALSE}
genus_data <- aggregate_taxa(ileum_asv_tab,
                             ileum_taxa_tab,
                             taxonomic_level = level)

ileum_genus_tab <- genus_data[[1]]
ileum_genus_taxa_tab <- genus_data[[2]]

ileum_genus_asv_taxa_tab <- create_asv_taxa_table(ileum_genus_tab,
                                                  ileum_genus_taxa_tab)
```

#### ibd vs no_ibd

```{r, warning=FALSE}
group <- c("no_ibd","ibd")
comparison_name <- paste0(group[1], " vs ",group[2])
```

```{r, echo=FALSE}
comparison_title <- sub("(\\w+) vs (\\w+)", "\\2 and \\1", comparison_name)
```

##### linDA

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}

# prepare the data
linda_data <- binomial_prep(ileum_genus_tab,
                            ileum_genus_taxa_tab,
                            ileum_metadata,
                            group, usage="linDA")

filt_ileum_uni_data <- linda_data[[1]]
filt_ileum_uni_taxa <- linda_data[[2]]
filt_ileum_uni_metadata <- linda_data[[3]]

# fit the model
linda.obj <- linda(filt_ileum_uni_data, 
                   filt_ileum_uni_metadata, 
                   formula = '~ Group * Country')

linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)

# save the results
group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO") 
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")

for (grp in c(group1,group2,group3)){
  raw_linda_results_genus[[segment]][[grp]] <- 
    rawlinda.df(linda.output,
                grp,
                filt_ileum_uni_data,
                filt_ileum_uni_taxa)
  
  linda_results_genus[[segment]][[grp]] <- 
    linda.df(linda.output,
             grp,
             filt_ileum_uni_data,
             filt_ileum_uni_taxa)
}

```

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output, 
                                group1, 
                                taxa_table = filt_ileum_uni_taxa) + 
            ggtitle(comparison_title)

volcano_2  <- volcano_plot_linda(linda.output, group2, 
                                taxa_table = filt_ileum_uni_taxa) + 
            ggtitle("NO vs CZ")

volcano_3 <- volcano_plot_linda(linda.output, group3, 
                                taxa_table = filt_ileum_uni_taxa) +
            ggtitle("Interaction effect")

volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)
volcano
```

##### MaAsLin2

```{r, echo=FALSE,results='hide',message=FALSE,warning=FALSE}
log_file <- file(tempfile(), open = "wt")
sink(log_file)  # Redirect standard output
sink(log_file, type = "message")  # Redirect messages and warnings

fit_data = Maaslin2(
    input_data = filt_ileum_uni_data, 
    input_metadata = filt_ileum_uni_metadata, min_abundance = 0,
    min_prevalence = 0,min_variance = 0,
    output = file.path(path_maaslin,group1), max_significance = 0.05,
    fixed_effects = c('Group', 'Country'),correction = "BH")

sink()  # Restore standard output
sink(type = "message")  # Restore messages
```

```{r, warning=FALSE}
volcano1 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa) + 
            ggtitle(comparison_title)

volcano2 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa,variable="Country") + 
            ggtitle("Country effect")

volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
```

##### Group - Intersection

```{r, warning=FALSE}
intersection_results <- group_intersection(group, list_intersections, list_venns,
                                           linda.output, fit_data,
                                           raw_linda_results_genus, 
                                           segment = segment,
                                           level=level)

list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]

# show the results
venn
```

##### Interaction effect

```{r, warning=FALSE}
list_interaction_significant <- country_interaction(group,
                                                    linda.output, 
                                                    list_intersections,
                                          filt_ileum_uni_data,
                                          filt_ileum_uni_metadata,
                                          segment=segment,
                                          level=level)

# see the result
## significant interaction effect
list_interaction_significant[[1]]

## results for czech cohort
list_interaction_significant[[2]]

## results for norwegian cohort
list_interaction_significant[[3]]
```

Removing problematic taxa

```{r, warning=FALSE}
list_intersections <- removing_interaction_problems(group,
                                                    list_interaction_significant,
                                                    list_intersections,
                                                    segment=segment,
                                                    level=level)
```

##### Basic statistics

```{r, warning=FALSE}
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
                 raw_linda_results_genus[[segment]][[group1]],
                 by="SeqID",all=TRUE)

uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df

# for comparison
new_name <- comparison_name
addWorksheet(wb, sheetName = new_name)
writeData(wb, sheet = new_name, uni_df, rowNames=FALSE)
```

#### Visualization

Heatmap visualizing the linDA's logFoldChange for taxa with p \< 0.1.

```{r, fig.width=10, fig.height=17, fig.fullwidth=TRUE}
list_heatmap <- list_intersections[grep(paste(segment,level),
                                  names(list_intersections),value=TRUE)]

if (length((list_heatmap[[1]][[1]]))>1){
  p_heatmap_linda <- heatmap_linda(list_heatmap,ileum_taxa_tab)
  p_heatmap_linda
}

```

Dotheatmap

```{r, warning=FALSE, fig.height=5, fig.width=4}
if (length((list_heatmap[[1]][[1]]))>0){
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,
                                      uni_statistics$terminal_ileum[grepl(level,names(uni_statistics$terminal_ileum))],
                                      ileum_taxa_tab)
dotheatmap_linda

}
```

**Horizontal bar plot**

```{r, warning=FALSE, fig.height=5, fig.width=4}
if (length((list_heatmap[[1]][[1]]))>0){
p_prevalence <- horizontal_barplot(wb,taxa=levels(dotheatmap_linda$data$SeqID))

p_prevalence_final <- ggarrange(p_prevalence,
                                ggplot() + theme_minimal(),
                                nrow = 2,heights = c(1,0.085))
p <- ggarrange(dotheatmap_linda + theme(legend.position = "none"),p_prevalence_final,ncol=2,widths = c(1,0.2))
p
}
```

```{r,results='hide',eval=FALSE, echo=FALSE}
pdf("../figures/Q3/dotplot_terminal_ileum.pdf",
    height =10,width = 4)
p
dev.off()
```

#### Saving results

```{r, warning=FALSE}
# ALL DATA
saveWorkbook(wb,file.path(path,paste0("uni_analysis_wb_",segment,".xlsx")),
             overwrite = TRUE)

# PSC effect
write.xlsx(psc_effect[[paste(segment,level)]],file.path(path,paste0("psc_effect_",segment,".xlsx")))

# SIGNIFICANT taxa

write.xlsx(list_intersections[grepl(segment,names(list_intersections))] %>%
            `names<-`(gsub(segment, "", names(
              list_intersections[grepl(segment,names(list_intersections))]))),
           file.path(path,paste0("significant_taxa_",segment,".xlsx")))
```

### Supplementary Analysis

```{r, warning=FALSE}
supplements_uni <- list()
supplements_wb <- createWorkbook()
```

#### ASV level

```{r, warning=FALSE}
level="ASV"
```

```{r, warning=FALSE}
path_maaslin="../intermediate_files/maaslin/Q3/ASV/"
```

```{r, warning=FALSE}
raw_linda_results <- list();
raw_linda_results[[segment]] <- list()
linda_results <- list(); 
linda_results[[segment]] <- list()
```

##### ibd vs no_ibd

```{r, warning=FALSE}
group <- c("no_ibd","ibd")
comparison_name <- paste0(group[1], " vs ",group[2])
```

```{r, echo=FALSE}
comparison_title <- sub("(\\w+) vs (\\w+)", "\\2 and \\1", comparison_name)
```

**linDA**

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}

# prepare the data
linda_data <- binomial_prep(ileum_asv_tab,
                            ileum_taxa_tab,
                            ileum_metadata,
                            group, usage="linDA")

filt_ileum_uni_data <- linda_data[[1]]
filt_ileum_uni_taxa <- linda_data[[2]]
filt_ileum_uni_metadata <- linda_data[[3]]

# fit the model
linda.obj <- linda(filt_ileum_uni_data, 
                   filt_ileum_uni_metadata, 
                   formula = '~ Group * Country')

linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)

# save the results
group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO") 
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")

for (grp in c(group1,group2,group3)){
  raw_linda_results[[segment]][[grp]] <- 
    rawlinda.df(linda.output,
                grp,
                filt_ileum_uni_data,
                filt_ileum_uni_taxa)
  
  linda_results[[segment]][[grp]] <- 
    linda.df(linda.output,
             grp,
             filt_ileum_uni_data,
             filt_ileum_uni_taxa)
}

```

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output, 
                                group1, 
                                taxa_table = filt_ileum_uni_taxa) + 
            ggtitle(comparison_title)

volcano_2  <- volcano_plot_linda(linda.output, group2, 
                                taxa_table = filt_ileum_uni_taxa) + 
            ggtitle("NO vs CZ")

volcano_3 <- volcano_plot_linda(linda.output, group3, 
                                taxa_table = filt_ileum_uni_taxa) +
            ggtitle("Interaction effect")

volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)
volcano
```

**MaAsLin2**

```{r, echo=FALSE,results='hide',message=FALSE,warning=FALSE}
log_file <- file(tempfile(), open = "wt")
sink(log_file)  # Redirect standard output
sink(log_file, type = "message")  # Redirect messages and warnings

fit_data = Maaslin2(
    input_data = filt_ileum_uni_data, 
    input_metadata = filt_ileum_uni_metadata, min_abundance = 0,
    min_prevalence = 0,min_variance = 0,
    output = file.path(path_maaslin,group1), max_significance = 0.05,
    fixed_effects = c('Group', 'Country'),correction = "BH")

sink()  # Restore standard output
sink(type = "message")  # Restore messages
```

```{r, warning=FALSE}
volcano1 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa) + 
            ggtitle(comparison_title)

volcano2 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa,variable="Country") + 
            ggtitle("Country effect")

volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
```

 Group - Intersection

```{r, warning=FALSE}
intersection_results <- group_intersection(group, list_intersections, list_venns,
                                           linda.output, fit_data,
                                           raw_linda_results, 
                                           segment = segment,
                                           level=level)

list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]

# show the results
venn
```

**Interaction effect**

```{r, warning=FALSE}
list_interaction_significant <- country_interaction(group,
                                                    linda.output, 
                                                    list_intersections,
                                          filt_ileum_uni_data,
                                          filt_ileum_uni_metadata,
                                          segment=segment,
                                          level=level)

# see the result
## significant interaction effect
list_interaction_significant[[1]]

## results for czech cohort
list_interaction_significant[[2]]

## results for norwegian cohort
list_interaction_significant[[3]]
```

Removing problematic taxa

```{r, warning=FALSE}
list_intersections <- removing_interaction_problems(group,
                                                    list_interaction_significant,
                                                    list_intersections,
                                                    segment=segment,
                                                    level=level)
```

 Basic statistics

```{r, warning=FALSE}
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
                 raw_linda_results[[segment]][[group1]],
                 by="SeqID",all=TRUE)

uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df

# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
```


##### Visualization

Heatmap visualizing the linDA's logFoldChange for taxa with p \< 0.1.

```{r, warning=FALSE, fig.height=5, fig.width=4}
list_heatmap <- list_intersections[grep(paste(segment,level),
                                  names(list_intersections),value=TRUE)]

if (length((list_heatmap[[1]][[1]]))>1){
p_heatmap_linda <- heatmap_linda(list_heatmap,ileum_taxa_tab)
p_heatmap_linda
}
```

Dot heatmap

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE}
if (length((list_heatmap[[1]][[1]]))>0){
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,
                                      uni_statistics$terminal_ileum[grepl(level,names(uni_statistics$terminal_ileum))],
                                      ileum_taxa_tab)
dotheatmap_linda
}
```

**Horizontal bar plot**

```{r, warning=FALSE}
if (length((list_heatmap[[1]][[1]]))>0){
p_prevalence <- horizontal_barplot(wb,taxa=levels(dotheatmap_linda$data$SeqID))

p_prevalence_final <- ggarrange(p_prevalence,
                                ggplot() + theme_minimal(),
                                nrow = 2,heights = c(1,0.085))
p <- ggarrange(dotheatmap_linda + theme(legend.position = "none"),p_prevalence_final,ncol=2,widths = c(1,0.2))
p
}
```

#### Phylum level

```{r, warning=FALSE}
level="phylum"
```

```{r, warning=FALSE}
path_maaslin="../intermediate_files/maaslin/Q3/Phylum/"
```

```{r, warning=FALSE}
raw_linda_results_phylum <- list();
raw_linda_results_phylum[[segment]] <- list()
linda_results_phylum <- list(); 
linda_results_phylum[[segment]] <- list()
```

Aggregate taxa

```{r, warning=FALSE}
phylum_data <- aggregate_taxa(ileum_asv_tab,
                             ileum_taxa_tab,
                             taxonomic_level = "Phylum")

ileum_phylum_tab <- phylum_data[[1]]
ileum_phylum_taxa_tab <- phylum_data[[2]]

```

##### ibd vs no_ibd

```{r, warning=FALSE}
group <- c("no_ibd","ibd")
comparison_name <- paste0(group[1], " vs ",group[2])
```

```{r, echo=FALSE}
comparison_title <- sub("(\\w+) vs (\\w+)", "\\2 and \\1", comparison_name)
```

**linDA**

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}

# prepare the data
linda_data <- binomial_prep(ileum_phylum_tab,
                            ileum_phylum_taxa_tab,
                            ileum_metadata,
                            group, usage="linDA")

filt_ileum_uni_data <- linda_data[[1]]
filt_ileum_uni_taxa <- linda_data[[2]]
filt_ileum_uni_metadata <- linda_data[[3]]

# fit the model
linda.obj <- linda(filt_ileum_uni_data, 
                   filt_ileum_uni_metadata, 
                   formula = '~ Group * Country')

linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)

# save the results
group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO") 
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")

for (grp in c(group1,group2,group3)){
  raw_linda_results_phylum[[segment]][[grp]] <- 
    rawlinda.df(linda.output,
                grp,
                filt_ileum_uni_data,
                filt_ileum_uni_taxa)
  
  linda_results_phylum[[segment]][[grp]] <- 
    linda.df(linda.output,
             grp,
             filt_ileum_uni_data,
             filt_ileum_uni_taxa)
}

```

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output, 
                                group1, 
                                taxa_table = filt_ileum_uni_taxa) + 
            ggtitle(comparison_title)

volcano_2  <- volcano_plot_linda(linda.output, group2, 
                                taxa_table = filt_ileum_uni_taxa) + 
            ggtitle("NO vs CZ")

volcano_3 <- volcano_plot_linda(linda.output, group3, 
                                taxa_table = filt_ileum_uni_taxa) +
            ggtitle("Interaction effect")

volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)
volcano
```

**MaAsLin2**

```{r, echo=FALSE,results='hide',message=FALSE,warning=FALSE}
log_file <- file(tempfile(), open = "wt")
sink(log_file)  # Redirect standard output
sink(log_file, type = "message")  # Redirect messages and warnings

fit_data = Maaslin2(
    input_data = filt_ileum_uni_data, 
    input_metadata = filt_ileum_uni_metadata, min_abundance = 0,
    min_prevalence = 0,min_variance = 0,
    output = file.path(path_maaslin,group1), max_significance = 0.05,
    fixed_effects = c('Group', 'Country'),correction = "BH")

sink()  # Restore standard output
sink(type = "message")  # Restore messages
```

```{r, warning=FALSE}
volcano1 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa) + 
            ggtitle(comparison_title)

volcano2 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa,variable="Country") + 
            ggtitle("Country effect")

volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
```

Group - Intersection

```{r, warning=FALSE}
intersection_results <- group_intersection(group, list_intersections, list_venns,
                                           linda.output, fit_data,
                                           raw_linda_results_phylum, 
                                           segment = segment,
                                           level=level)

list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]

# show the results
venn
```

 **Interaction effect**

```{r, warning=FALSE}
list_interaction_significant <- country_interaction(group,
                                                    linda.output, 
                                                    list_intersections,
                                          filt_ileum_uni_data,
                                          filt_ileum_uni_metadata,
                                          segment=segment,
                                          level=level)

# see the result
## significant interaction effect
list_interaction_significant[[1]]

## results for czech cohort
list_interaction_significant[[2]]

## results for norwegian cohort
list_interaction_significant[[3]]
```

Removing problematic taxa

```{r, warning=FALSE}
list_intersections <- removing_interaction_problems(group,
                                                    list_interaction_significant,
                                                    list_intersections,
                                                    segment=segment,
                                                    level=level)
```

 Basic statistics

```{r, warning=FALSE}
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
                 raw_linda_results_phylum[[segment]][[group1]],
                 by="SeqID",all=TRUE)

uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df

# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
```


##### Visualization

Heatmap visualizing the linDA's logFoldChange for taxa with p \< 0.1.

```{r, warning=FALSE, fig.height=5, fig.width=4}
list_heatmap <- list_intersections[grep(paste(segment,level),
                                  names(list_intersections),value=TRUE)]

if (length((list_heatmap[[1]][[1]]))>1){
p_heatmap_linda <- heatmap_linda(list_heatmap,ileum_taxa_tab)
p_heatmap_linda
}
```

Dot heatmap

```{r, fig.width=5, fig.height=17, fig.fullwidth=TRUE}
if (length((list_heatmap[[1]][[1]]))>1){
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,
                                      uni_statistics$terminal_ileum[grepl(level,names(uni_statistics$terminal_ileum))],
                                      ileum_taxa_tab)
dotheatmap_linda
}
```


#### Saving results

```{r, warning=FALSE}
# ALL DATA
saveWorkbook(supplements_wb,file.path(path,paste0("supplements_uni_analysis_wb_",segment,".xlsx")),overwrite = TRUE)

# SIGNIFICANT taxa
write.xlsx(list_intersections[grepl(segment,names(list_intersections))] %>%
            `names<-`(gsub(segment, "", names(
              list_intersections[grepl(segment,names(list_intersections))]))),
           file.path(path,paste0("supplements_significant_taxa_",segment,".xlsx")))
```


## Results overview

#### Alpha diversity

```{r,warning=FALSE}
knitr::kable(pc_observed[[segment]],
             digits = 3,
             caption = "Results of linear model testing ASV Richness")

knitr::kable(pc_shannon[[segment]],
             digits = 3,
             caption = "Results of linear model testing Shannon index")

knitr::kable(pc_simpson[[segment]],
             digits = 3,
             caption = "Results of linear model testing Simpson index")

knitr::kable(pc_pielou[[segment]],
             digits = 3,
             caption = "Results of linear model testing Pielou index")
```

Plots

```{r, fig.width=4, fig.height=5, fig.fullwidth=TRUE}
alpha_div_plots[[paste(segment,"Country")]]
```


#### Beta diversity

**Main results**

```{r,warning=FALSE}
knitr::kable(pairwise_aitchison_raw[[paste("genus", segment)]],
             digits = 3,
             caption = "Results of PERMANOVA - robust aitchison distance")
```

*PCA*

```{r, fig.width=5, fig.height=3, fig.fullwidth=TRUE, eval=TRUE}
pca_plots_list[[paste(segment,"genus custom")]]
```

**Supplements**

```{r, warning=FALSE}
knitr::kable(supplements_beta[!grepl("PCoA",names(supplements_beta)) & (grepl("genus",names(supplements_beta)))],
             digits = 3,
             caption = "Supplementary PERMANOVA results: Bray-curtis, Jaccard distances")
```

*PCA*

```{r, fig.width=8, fig.height=7, fig.fullwidth=TRUE, eval=TRUE}
ggarrange(plotlist = supplements_beta[grepl("PCoA",names(supplements_beta))],
          labels=names(supplements_beta[grepl("PCoA",names(supplements_beta))]),
          font.label = list(size=5,face="plain"),
          ncol=2,nrow=3)
```

#### Univariate analysis

**Number of significant taxa**

```{r, warning=FALSE}
knitr::kable(as.data.frame(lapply(list_intersections,nrow)) %>% t() %>% 
  `colnames<-`("Count") %>% 
  `rownames<-`(c(names(list_intersections))),caption="Number of significant taxa")
```

# Data Analysis - Colon

```{r, warning=FALSE}
segment="colon"
```

## Filtering

Rules: - prevalence \> 5% (per group) - nearZeroVar with default
settings - sequencing depth \> 5000 - taxonomic assignment at least
order


Library size

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE, warning=FALSE}
read_counts(colon_asv_tab, line = c(5000,10000))
```

### Sequencing depth

```{r, warning=FALSE}
data_filt <- seq_depth_filtering(colon_asv_tab,
                                 colon_taxa_tab,
                                 colon_metadata,
                                 seq_depth_threshold = 10000)

filt_colon_asv_tab <- data_filt[[1]]; alpha_colon_asv_tab <- filt_colon_asv_tab
filt_colon_taxa_tab <- data_filt[[2]]; alpha_colon_taxa_tab <- filt_colon_taxa_tab
filt_colon_metadata <- data_filt[[3]]; alpha_colon_metadata <- filt_colon_metadata

seq_step <- dim(filt_colon_asv_tab)[1]
```

Library size

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE, warning=FALSE}
read_counts(filt_colon_asv_tab,line = c(10000))
```

### NearZeroVar

```{r, warning=FALSE}
data_filt <- nearzerovar_filtering(filt_colon_asv_tab,
                                   filt_colon_taxa_tab,
                                   filt_colon_metadata)

filt_colon_asv_tab <- data_filt[[1]]
filt_colon_taxa_tab <- data_filt[[2]]
nearzero_step <- dim(filt_colon_asv_tab)[1]
```

Library size

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE}
read_counts(filt_colon_asv_tab,line = c(5000,10000))
```

Check zero depth

```{r, warning=FALSE}
data_filt <- check_zero_depth(filt_colon_asv_tab, 
                              filt_colon_taxa_tab, 
                              filt_colon_metadata)

filt_colon_asv_tab <- data_filt[[1]]; 
filt_colon_taxa_tab <- data_filt[[2]]; 
filt_colon_metadata <- data_filt[[3]]; 
```

Library size

```{r, fig.width=5, fig.height=4, fig.fullwidth=TRUE}
read_counts(filt_colon_asv_tab,line = c(5000,10000))
```

### Final Counts

```{r, warning=FALSE}
final_counts_filtering(colon_asv_tab,
                       filt_colon_asv_tab,
                       filt_colon_metadata,
                       seq_step, 0, nearzero_step)
```

## Alpha diversity

```{r, warning=FALSE}
path = "../results/Q3/alpha_diversity"
```

**Calculation**

```{r, warning=FALSE}
# Construct MPSE object
alpha_colon_metadata$Sample <- alpha_colon_metadata$SampleID
colon_mpse <- as.MPSE(construct_phyloseq(alpha_colon_asv_tab,
                                         alpha_colon_taxa_tab,
                                         alpha_colon_metadata))

colon_mpse %<>% mp_rrarefy(raresize = 10000,seed = 123)

# Calculate alpha diversity - rarefied counts
colon_mpse %<>% mp_cal_alpha(.abundance=RareAbundance, force=TRUE)
```

```{r, warning=FALSE}
alpha_data <- data.frame(SampleID=colon_mpse$Sample.x,
                         Observe=colon_mpse$Observe,
                         Shannon=colon_mpse$Shannon,
                         Simpson=colon_mpse$Simpson,
                         Pielou=colon_mpse$Pielou,
                         Group=colon_mpse$Group,
                         Country=colon_mpse$Country,
                         Patient=colon_mpse$Patient)

write.csv(alpha_data,file.path(path,paste0("alpha_indices_",segment,".csv")),
          row.names = FALSE)
```

### Plots

```{r, fig.width=4, fig.height=5, fig.fullwidth=TRUE}
p_boxplot_alpha <- alpha_diversity_countries(alpha_data)

# save the results
alpha_div_plots[[paste(segment,"Country")]] <- p_boxplot_alpha

# see the results
p_boxplot_alpha
```

```{r,results='hide', echo=FALSE}
pdf("../figures/Q3/alpha_diversity_colon.pdf",
    height =4,width = 7)
p_boxplot_alpha
dev.off()
```

### Linear Model

```{r, warning=FALSE}
path = "../results/Q3/alpha_diversity"
alpha_data <- read.csv(file.path(path,paste0("alpha_indices_",segment,".csv")))
```

**Richness**

```{r, warning=FALSE}
results_model <- pairwise.lmer(
  formula = "Observe ~ Group * Country + (1|Patient)",
  factors=alpha_data$Group,
  data=alpha_data)

# check interaction
if (!is.data.frame(results_model)){
  results_model_observe <- results_model[[1]]
  results_model_observe_detailed <- results_model[[2]]
} else {
  results_model_observe <- results_model
  results_model_observe_detailed <- NA
}

# save the results
pc_observed[[segment]] <- results_model_observe
```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_observe,digits = 3,
caption = "Raw results of linear model of richness estimation.")

knitr::kable(results_model_observe_detailed,digits = 3,
caption = "Raw results of independent country analysis")
```

**Shannon**

```{r, warning=FALSE}
results_model <- pairwise.lmer(
  formula = "Shannon ~ Group * Country + (1|Patient)",
  factors=alpha_data$Group,
  data=alpha_data)

# check interaction
if (!is.data.frame(results_model)){
  results_model_shannon <- results_model[[1]]
  results_model_shannon_detailed <- results_model[[2]]
} else {
  results_model_shannon <- results_model
  results_model_shannon_detailed <- NA
}

# save the results
pc_shannon[[segment]] <- as.data.frame(results_model_shannon)

```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_shannon,digits = 3,
caption = "Raw results of linear model of Shannon estimation.")

knitr::kable(results_model_shannon_detailed,digits = 3,
caption = "Raw results of independent country analysis")
```

**Simpson**

```{r, warning=FALSE}
results_model <- pairwise.lmer(
  formula = "Simpson ~ Group * Country + (1|Patient)",
  factors=alpha_data$Group,
  data=alpha_data)

# check interaction
if (!is.data.frame(results_model)){
  results_model_simpson <- results_model[[1]]
  results_model_simpson_detailed <- results_model[[2]]
} else {
  results_model_simpson <- results_model
  results_model_simpson_detailed <- NA
}

# save the results
pc_simpson[[segment]] <- as.data.frame(results_model_simpson)

```

```{r, warning=FALSE}
# see the results
knitr::kable(results_model_simpson,digits = 3,
caption = "Raw results of linear model of Simpson estimation.")

knitr::kable(results_model_simpson_detailed,digits = 3,
caption = "Raw results of independent country analysis")
```


### Saving results

```{r, warning=FALSE}
alpha_list <- list(
  Richness=pc_observed[[segment]] %>% rownames_to_column("Comparison"),
  Shannon=pc_shannon[[segment]] %>% rownames_to_column("Comparison"),
  Simpson=pc_simpson[[segment]] %>% rownames_to_column("Comparison"))
                   
write.xlsx(alpha_list, 
           file = file.path(path,paste0("alpha_diversity_results_",segment,".xlsx")))
```


## Beta diversity

Calculating Aitchison distance (euclidean distance on clr-transformed
data), both at ASV and genus level.

### Main analysis - Genus, Aitchison

**Genus level, Aitchison distance**

```{r, warning=FALSE}
level="genus"
```

```{r, warning=FALSE}
path = "../results/Q3/beta_diversity"
```

Aggregation, filtering

```{r, warning=FALSE}
genus_data <- aggregate_taxa(colon_asv_tab,
                             colon_taxa_tab,
                             taxonomic_level=level,
                             names=TRUE)

filt_data <- filtering_steps(genus_data[[1]],
                             genus_data[[2]],
                             colon_metadata,
                            seq_depth_threshold=10000)

filt_colon_genus_tab <- filt_data[[1]]
filt_colon_genus_taxa <- filt_data[[2]]
filt_colon_genus_metadata <- filt_data[[3]]
```

##### PERMANOVA

```{r, warning=FALSE}
pairwise_df <- filt_colon_genus_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,filt_colon_genus_metadata$Group,
                           covariate = filt_colon_genus_metadata$Country, 
                           patients = filt_colon_genus_metadata$Patient,
                           sim.method = "robust.aitchison", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_colon_genus_metadata$Group,
                          covariate = filt_colon_genus_metadata$Country, 
                          interaction = TRUE, 
                          patients = filt_colon_genus_metadata$Patient,
                          sim.method = "robust.aitchison", p.adjust.m="BH")

# tidy the results
pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
pairwise_aitchison_raw[[paste(level, segment)]] <-rbind(pp_factor,pp_cov,pp_fac.cov)

```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.1]

if (length(interaction_sig)>0){
 for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_colon_genus_metadata$Group,
                      covariate = filt_colon_genus_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      patients = filt_colon_genus_metadata$Patient)
  print(result_list)
} 
}

```

##### Plots

**PCoA custom**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_colon_genus_tab,
                                 filt_colon_genus_taxa,
                                 filt_colon_genus_metadata,
                                 show_boxplots = TRUE,
                                 variable = "Group", size=2, 
                                 show_legend=FALSE)

# save the results
pca_plots_list[[paste(segment,level,"custom")]] <- p

# see the results
p

```

```{r,results='hide', echo=FALSE}
pdf("../figures/Q3/beta_diversity_colon.pdf",
    height =5,width = 5)
p
dev.off()
```


#### PCA + correlations

```{r}
variables= c("Calprotectin","Nancy_max","eMAYO","MAYO_dai")
```

```{r}
metadata_clinical <- metadata_final
metadata_clinical$PatientID <- as.character(metadata_clinical$PatientID)

metadata_colon_pca <- merge(filt_colon_metadata %>% dplyr::mutate(PatientID=Patient),metadata_clinical[,c("SampleID",variables)],by="SampleID",all.x=TRUE) %>% dplyr::select(SampleID, Group, Country,variables,PatientID) 


res <- pca_plot_corr(filt_colon_genus_tab,
                     filt_colon_genus_taxa,
                     filt_colon_metadata,
                     show_boxplots = FALSE,
                     variable = "Group", size=3, 
                     segment=segment,
                     show_legend= FALSE,
                     clinical = TRUE, 
                     clinical_metadata = metadata_colon_pca,
                     variables= c("Calprotectin","Nancy_max","eMAYO","MAYO_dai"))

res
```

**heatmap**

```{r}
df_heatmap <- melt(res[[3]] %>% rownames_to_column("SeqID") %>% 
                     mutate(PCo1=r) %>% select(SeqID,PCo1))
labels_df <- melt(res[[3]] %>% rownames_to_column("SeqID") %>% select(SeqID,p_adjusted))

labels <- labels_df
labels$variable <- "PCo1"
labels$value <- NA
labels$value[labels_df$value<=0.001] <- "***"
labels$value[labels_df$value<=0.01] <- "**"
labels$value[labels_df$value<=0.05] <- "*"

p_mdi_colon <- ggplot() + 
  geom_tile(data=df_heatmap, aes(variable, SeqID, fill= value))  + 
  theme_minimal() + 
  scale_fill_gradient2(name = "Rho", low = "blue", mid = "white", high = "red", midpoint = 0,limits = c(-0.7, 0.7)) + 
  geom_text(data=labels,aes(x=variable,y=SeqID,label=value,vjust=0.6)) +
  xlab("") + ylab("")  

p_mdi_colon
```

**Calprotectin**

```{r}
metadata_colon_pca %<>% dplyr::mutate(log_Calprotectin=log(Calprotectin)) %>% `rownames<-`(NULL)

metadata_colon_pca <- metadata_colon_pca[match(filt_colon_metadata$SampleID, metadata_colon_pca$SampleID), ] %>% `rownames<-`(NULL)

p_2 <- pca_plot_custom(filt_colon_genus_tab,
                     filt_colon_genus_taxa,
                     metadata_colon_pca,
                     show_boxplots = FALSE,
                     variable = "log_Calprotectin", size=3, 
                     show_legend= FALSE)

p_2
```


#### Saving results

```{r, warning=FALSE}
write.xlsx(pairwise_aitchison_raw[[paste(level, segment)]], 
           file = file.path(path,
           paste0("beta_diversity_results_", segment,".xlsx")))
```

### Supplementary analysis

#### Genus level

```{r, warning=FALSE}
level="genus"
```

##### Bray-Curtis

**PERMANOVA**

```{r, warning=FALSE}
pairwise_df <- filt_colon_genus_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,
                           filt_colon_genus_metadata$Group,
                           covariate = filt_colon_genus_metadata$Country, 
                           patients = filt_colon_genus_metadata$Patient,
                           sim.method = "bray", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,
                          filt_colon_genus_metadata$Group,
                          covariate = filt_colon_genus_metadata$Country, 
                          patients = filt_colon_genus_metadata$Patient,
                          interaction = TRUE, sim.method = "bray", p.adjust.m="BH")

# tidy the results
pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("bray",level,segment)]] <- rbind(pp_factor,pp_cov,pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_colon_genus_metadata$Group,
                      covariate = filt_colon_genus_metadata$Country, 
                      patients = filt_colon_genus_metadata$Patient,
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'bray')
  print(result_list)
}
}
```

**Plots**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_colon_genus_tab,
                                 filt_colon_genus_taxa,
                                 filt_colon_genus_metadata,
                                 measure = "bray",
                                 show_boxplots = TRUE,
                                 variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA bray",level,segment)]] <- p

# see the results
p
```

##### Jaccard

**PERMANOVA**

```{r, warning=FALSE}
pairwise_df <- filt_colon_genus_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,
                           filt_colon_genus_metadata$Group,
                           covariate = filt_colon_genus_metadata$Country,
                           patients = filt_colon_genus_metadata$Patient,
                           sim.method = "jaccard", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,
                          filt_colon_genus_metadata$Group,
                          covariate = filt_colon_genus_metadata$Country,
                          patients = filt_colon_genus_metadata$Patient,
                          interaction = TRUE, sim.method = "jaccard", p.adjust.m="BH")

# tidy the results
pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("jaccard",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_colon_genus_metadata$Group,
                      covariate = filt_colon_genus_metadata$Country, 
                      patients = filt_colon_genus_metadata$Patient,
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'jaccard')
  print(result_list)
}
}
```

**Plots**

*Custom*

```{r, warning=FALSE}
p <- pca_plot_custom(filt_colon_genus_tab,
                                 filt_colon_genus_taxa,
                                 filt_colon_genus_metadata,
                                 measure = "jaccard",
                                 show_boxplots = TRUE,
                                 variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA jaccard",level,segment)]] <- p

# see the results
p
```

#### ASV level

```{r, warning=FALSE}
level="ASV"
```

##### Aitchison

```{r, warning=FALSE}
# preparing data frame
pairwise_df <- filt_colon_asv_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(x=pairwise_df,
                          filt_colon_metadata$Group,
                           covariate = filt_colon_metadata$Country, 
                           sim.method = "robust.aitchison", 
                           p.adjust.m="BH",
                           patients = filt_colon_metadata$Patient)

# interaction
pp_int <- pairwise.adonis(pairwise_df,filt_colon_metadata$Group,
                          covariate = filt_colon_metadata$Country, 
                          interaction = TRUE, 
                          sim.method = "robust.aitchison", 
                          p.adjust.m="BH",
                          patients = filt_colon_metadata$Patient)

pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("aitchison",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)

# see the results
pp_factor
pp_cov
pp_fac.cov

```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
 for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_colon_metadata$Group,
                      covariate = filt_colon_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      patients = filt_colon_metadata$Patient)
  print(result_list)
} 
}
```

**PCoA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_colon_asv_tab,
                           filt_colon_taxa_tab,
                           filt_colon_metadata,
                           show_boxplots = TRUE,
                           variable = "Group", 
                           size=3, 
                           show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA aitchison",level,segment)]] <- p

# see the results
p
```

##### Bray-Curtis 

**PERMANOVA**

```{r, warning=FALSE}
# preparing data frame
pairwise_df <- filt_colon_asv_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,
                           filt_colon_metadata$Group,
                           covariate = filt_colon_metadata$Country,
                           patients = filt_colon_metadata$Patient,
                           sim.method = "bray", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,
                          filt_colon_metadata$Group,
                          covariate = filt_colon_metadata$Country, 
                          patients = filt_colon_metadata$Patient,
                          interaction = TRUE, sim.method = "bray", p.adjust.m="BH")

pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("bray",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)

```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_colon_metadata$Group,
                      covariate = filt_colon_metadata$Country, 
                      group1 = group1,
                      group2 = group2,
                      patients = filt_colon_metadata$Patient,
                      sim.method = 'bray')
  print(result_list)
}
}
```

**PCoA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_colon_asv_tab,
                     filt_colon_taxa_tab,
                     filt_colon_metadata,
                     measure = "bray",
                     show_boxplots = TRUE,
                     variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA bray",level,segment)]] <- p

# see the results
p
```

##### Jaccard

**PERMANOVA**

```{r, warning=FALSE}
# preparing data frame
pairwise_df <- filt_colon_asv_tab %>% column_to_rownames("SeqID") %>% t()

# main effect
pp_main <- pairwise.adonis(pairwise_df,
                           filt_colon_metadata$Group,
                           covariate = filt_colon_metadata$Country,
                           patients = filt_colon_metadata$Patient,
                           sim.method = "jaccard", p.adjust.m="BH")

# interaction
pp_int <- pairwise.adonis(pairwise_df,
                          filt_colon_metadata$Group,
                          covariate = filt_colon_metadata$Country, 
                          patients = filt_colon_metadata$Patient,
                          interaction = TRUE, sim.method = "jaccard", p.adjust.m="BH")

pp_factor <- pp_main[[1]]
pp_cov <- pp_main[[2]]
pp_fac.cov <- pp_int[[3]]

cols <- c("pairs","Df","SumsOfSqs", "F.Model","R2","p.value", "p.adjusted", "sig")
colnames(pp_factor) <- cols; colnames(pp_cov) <- cols; colnames(pp_fac.cov) <- cols; 

# save raw results
supplements_beta[[paste("jaccard",level,segment)]] <- rbind(pp_factor, 
                                                            pp_cov, 
                                                            pp_fac.cov)
```

```{r, warning=FALSE}
# see the results
knitr::kable(pp_factor,digits = 3,caption = "PERMANOVA, GROUP separation")
knitr::kable(pp_cov,digits = 3,caption = "PERMANOVA, COUNTRY separation")
knitr::kable(pp_fac.cov,digits = 3,caption = "PERMANOVA, INTERACTION GROUP:Country")
```

Interaction check

```{r, warning=FALSE}
interaction_sig <- pp_fac.cov$pairs[pp_fac.cov$p.adjusted < 0.05]

if (length(interaction_sig)>0){
for (i in 1:length(interaction_sig)){
  group1 <- unlist(strsplit(interaction_sig[i],split = " vs "))[1]
  group2 <- unlist(strsplit(interaction_sig[i],split = " vs "))[2]
  group2 <- unlist(strsplit(group2,split = " : "))[1]
  
  result_list <- adonis_postanalysis(x=pairwise_df,
                      factors = filt_colon_metadata$Group,
                      covariate = filt_colon_metadata$Country, 
                      patients = filt_colon_metadata$Patient,
                      group1 = group1,
                      group2 = group2,
                      sim.method = 'jaccard')
  print(result_list)
}
}
```

**PCoA**

```{r, warning=FALSE}
p <- pca_plot_custom(filt_colon_asv_tab,
                     filt_colon_taxa_tab,
                     filt_colon_metadata,
                     measure = "jaccard",
                     show_boxplots = TRUE,
                     variable = "Group", size=3, show_legend=TRUE)

# save the results
supplements_beta[[paste("PCoA jaccard",level,segment)]] <- p

# see the results
p
```

#### Saving results

```{r, warning=FALSE}
write.xlsx(supplements_beta[!grepl("PCoA",names(supplements_beta))],
           file = file.path(path,
           paste0("supplements_beta_diversity_", segment,".xlsx")))
```

## Univariate Analysis

### Main - Genus level

```{r, warning=FALSE}
level="genus"
```

```{r, warning=FALSE}
# needed paths
path = "../results/Q3/univariate_analysis"
path_maaslin=file.path("../intermediate_files/maaslin/Q3",level)
```

```{r, warning=FALSE}
# variables
raw_linda_results_genus[[segment]] <- list()
linda_results_genus[[segment]] <- list()

# country and interaction problems
list_intersections <- list()
list_venns <- list()
uni_statistics <- list()

# workbook for final df
wb <- createWorkbook()

# PSC effect
psc_effect <- list()
```

#### Genus level

```{r, warning=FALSE}
level="genus"
```

Aggregate taxa

```{r, warning=FALSE}
genus_data <- aggregate_taxa(colon_asv_tab,
                             colon_taxa_tab,
                             taxonomic_level = level)

colon_genus_tab <- genus_data[[1]]
colon_genus_taxa_tab <- genus_data[[2]]

colon_genus_asv_taxa_tab <- create_asv_taxa_table(colon_genus_tab,
                                                  colon_genus_taxa_tab)
```

##### ibd vs no_ibd

```{r, warning=FALSE}
group <- c("no_ibd","ibd")
comparison_name <- paste0(group[1], " vs ",group[2])
```

```{r, echo=FALSE}
comparison_title <- sub("(\\w+) vs (\\w+)", "\\2 and \\1", comparison_name)
```

###### linda

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}

# prepare the data
linda_data <- binomial_prep(colon_genus_tab,
                            colon_genus_taxa_tab,
                            colon_metadata,
                            group, usage="linDA")

filt_colon_uni_data <- linda_data[[1]]
filt_colon_uni_taxa <- linda_data[[2]]
filt_colon_uni_metadata <- linda_data[[3]]

# fit the model
linda.obj <- linda(filt_colon_uni_data,
                   filt_colon_uni_metadata,
                   formula = '~ Group * Country + (1|Patient)')

linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)

# save the results
group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO") 
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")


for (grp in c(group1,group2,group3)){
  raw_linda_results_genus[[segment]][[grp]] <- 
    rawlinda.df(linda.output,
                grp,
                filt_colon_uni_data,
                filt_colon_uni_taxa)
  
  linda_results_genus[[segment]][[grp]] <- 
    linda.df(linda.output,
             grp,
             filt_colon_uni_data,
             filt_colon_uni_taxa)
}
```

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output, group1, 
                                taxa_table = filt_colon_uni_taxa) + 
            ggtitle(paste(group,collapse=" vs "))

volcano_2  <- volcano_plot_linda(linda.output, group2, 
                                taxa_table = filt_colon_uni_taxa) + 
            ggtitle("NO vs CZ")

volcano_3 <- volcano_plot_linda(linda.output, group3, 
                                taxa_table = filt_colon_uni_taxa) +
            ggtitle("Interaction effect")

volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)

# see the plot
volcano
```

###### MaAsLin2

```{r, echo=FALSE,results='hide',message=FALSE,warning=FALSE}
log_file <- file(tempfile(), open = "wt")
sink(log_file)  # Redirect standard output
sink(log_file, type = "message")  # Redirect messages and warnings

fit_data = Maaslin2(
    input_data = filt_colon_uni_data, 
    input_metadata = filt_colon_uni_metadata, min_abundance = 0,
    min_prevalence = 0,min_variance = 0,
    output = file.path(path_maaslin,group1), max_significance = 0.05,
    fixed_effects = c('Group', 'Country'),random_effects = "Patient",
    correction = "BH")

sink()  # Restore standard output
sink(type = "message")  # Restore messages
```

```{r, warning=FALSE}
volcano1 <- volcano_plot_maaslin(fit_data,filt_colon_uni_taxa) + 
            ggtitle(paste(group[1], "vs", group[2]))

volcano2 <- volcano_plot_maaslin(fit_data,filt_colon_uni_taxa,variable="Country") + 
            ggtitle("Country effect")

volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
```

###### Group - Intersection

```{r, warning=FALSE}
intersection_results <- group_intersection(group, list_intersections, list_venns,
                                           linda.output, fit_data,
                                           raw_linda_results_genus, 
                                           segment = segment,
                                           level=level)

list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]

# show the results
venn
```

###### Interaction effect

```{r, warning=FALSE}
list_interaction_significant <- country_interaction(group,
                                                    linda.output, 
                                                    list_intersections,
                                          filt_colon_uni_data,
                                          filt_colon_uni_metadata,
                                          segment=segment,
                                          level=level)

# see the result
## significant interaction effect
list_interaction_significant[[1]]

## results for czech cohort
list_interaction_significant[[2]]

## results for norwegian cohort
list_interaction_significant[[3]]
```

Removing problematic taxa

```{r, warning=FALSE}
list_intersections <- removing_interaction_problems(group,
                                                    list_interaction_significant,
                                                    list_intersections,
                                                    segment=segment,
                                                    level=level)
```

##### Basic statistics

```{r, warning=FALSE}
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
                 raw_linda_results_genus[[segment]][[group1]],
                 by="SeqID",all=TRUE)

uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df

# for comparison
new_name <- comparison_name
addWorksheet(wb, sheetName = new_name)
writeData(wb, sheet = new_name, uni_df, rowNames=FALSE)
```

##### Visualization

Heatmap visualizing the linDA's logFoldChange for taxa with p \< 0.1.

```{r, fig.width=10, fig.height=17, fig.fullwidth=TRUE}
list_heatmap <- list_intersections[grep(paste(segment,level),
                                  names(list_intersections),value=TRUE)]
if (length((list_heatmap[[1]][[1]]))>1){
p_heatmap_linda <- heatmap_linda(list_heatmap,colon_taxa_tab)
p_heatmap_linda
}
```

Dot heatmap

```{r, fig.width=5, fig.height=17, fig.fullwidth=TRUE}
if (length((list_heatmap[[1]][[1]]))>0){
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,
                                      uni_statistics$terminal_ileum[grepl(level,names(uni_statistics$terminal_ileum))],
                                      colon_taxa_tab)
dotheatmap_linda
}
```

**Horizontal bar plot**

```{r, warning=FALSE}
if (length((list_heatmap[[1]][[1]]))>0){
p_prevalence <- horizontal_barplot(wb,taxa=levels(dotheatmap_linda$data$SeqID))

p_prevalence_final <- ggarrange(p_prevalence,
                                ggplot() + theme_minimal(),
                                nrow = 2,heights = c(1,0.085))
p <- ggarrange(dotheatmap_linda + theme(legend.position = "none"),p_prevalence_final,ncol=2,widths = c(1,0.2))
p
}
```

```{r,results='hide',eval=FALSE, echo=FALSE}
pdf("../figures/Q3/dotplot_colon.pdf",
    height =10,width = 4)
p
dev.off()
```


#### Saving results

```{r, warning=FALSE}
# ALL DATA
saveWorkbook(wb,file.path(path,paste0("uni_analysis_wb_",segment,".xlsx")),
             overwrite = TRUE)

# SIGNIFICANT taxa

write.xlsx(list_intersections[grepl(segment,names(list_intersections))] %>%
            `names<-`(gsub(segment, "", names(
              list_intersections[grepl(segment,names(list_intersections))]))),
           file.path(path,paste0("significant_taxa_",segment,".xlsx")))
```

### Supplementary Analysis

#### ASV level

```{r, warning=FALSE}
level="ASV"
```

```{r, warning=FALSE}
path_maaslin="../intermediate_files/maaslin/Q3/ASV/"
```

```{r, warning=FALSE}
raw_linda_results[[segment]] <- list()
linda_results[[segment]] <- list()
supplements_wb <- createWorkbook()
```

##### ibd vs no_ibd

```{r, warning=FALSE}
group <- c("no_ibd","ibd")
comparison_name <- paste0(group[1], " vs ",group[2])
```

```{r, echo=FALSE}
comparison_title <- sub("(\\w+) vs (\\w+)", "\\2 and \\1", comparison_name)
```

**linDA**

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}

# prepare the data
linda_data <- binomial_prep(colon_asv_tab,
                            colon_taxa_tab,
                            colon_metadata,
                            group, usage="linDA")

filt_colon_uni_data <- linda_data[[1]]
filt_colon_uni_taxa <- linda_data[[2]]
filt_colon_uni_metadata <- linda_data[[3]]

# fit the model
linda.obj <- linda(filt_colon_uni_data, 
                   filt_colon_uni_metadata, 
                   formula = '~ Group * Country + (1|Patient)')

linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)

group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO") 
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")

for (grp in c(group1,group2,group3)){
  raw_linda_results[[segment]][[grp]] <- 
    rawlinda.df(linda.output,
                grp,
                filt_colon_uni_data,
                filt_colon_uni_taxa)
  
  linda_results[[segment]][[grp]] <- 
    linda.df(linda.output,
             grp,
             filt_colon_uni_data,
             filt_colon_uni_taxa)
}

```

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output, group1,
                                taxa_table = filt_colon_uni_taxa) +
              ggtitle(paste(group,collapse=" vs "))

volcano_2  <- volcano_plot_linda(linda.output, group2, 
                                 taxa_table = filt_colon_uni_taxa) + 
              ggtitle("Country effect")

volcano_3 <- volcano_plot_linda(linda.output, group3, 
                                taxa_table = filt_colon_uni_taxa) + 
              ggtitle("Interaction effect")

volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)

# see the plot
volcano
```

**MaAsLin2**

```{r, echo=FALSE,results='hide',message=FALSE,warning=FALSE}
log_file <- file(tempfile(), open = "wt")
sink(log_file)  # Redirect standard output
sink(log_file, type = "message")  # Redirect messages and warnings

fit_data = Maaslin2(
    input_data = filt_colon_uni_data, 
    input_metadata = filt_colon_uni_metadata, min_abundance = 0,
    min_prevalence = 0,min_variance = 0,
    output = file.path(path_maaslin,group1), max_significance = 0.05,
    fixed_effects = c('Group', 'Country'),random_effects = "Patient",
    correction = "BH")

sink()  # Restore standard output
sink(type = "message")  # Restore messages
```

Volcano plot

```{r, warning=FALSE}
volcano1 <- volcano_plot_maaslin(fit_data,filt_colon_uni_taxa) + 
            ggtitle(paste(group[1], "vs", group[2]))

volcano2 <- volcano_plot_maaslin(fit_data,filt_colon_uni_taxa,variable="Country") +
            ggtitle("Country effect")

volcano <- ggarrange(volcano1,volcano2, ncol=2)

# see the results
volcano

```

**Group - Intersection**

```{r, warning=FALSE}
intersection_results <- group_intersection(group, list_intersections, list_venns,
                                           linda.output, fit_data,
                                           raw_linda_results, 
                                                                                      segment = segment,
                                           level=level)

list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]

# show the results
venn
```

**Interaction effect**

```{r, warning=FALSE}
list_interaction_significant <- country_interaction(group,
                                                    linda.output, 
                                                    list_intersections,
                                                    filt_colon_uni_data,
                                                    filt_colon_uni_metadata,
                                                    segment=segment,
                                          level=level)

# see the result
## significant interaction effect
list_interaction_significant[[1]]

## results for czech cohort
list_interaction_significant[[2]]

## results for norwegian cohort
list_interaction_significant[[3]]
```

Removing problematic taxa

```{r, warning=FALSE}
list_intersections <- removing_interaction_problems(group,
                                                    list_interaction_significant,
                                                    list_intersections,
                                                    segment=segment,
                                                    level=level)
```

Basic statistics

```{r, warning=FALSE}
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
                 raw_linda_results[[segment]][[group1]],
                 by="SeqID",all=TRUE)

uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df

# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
```


##### Visualization

Heatmap visualizing the linDA's logFoldChange for taxa with p \< 0.1.

```{r, fig.width=10, fig.height=17, fig.fullwidth=TRUE}
list_heatmap <- list_intersections[grep(paste(segment,level),
                                  names(list_intersections),value=TRUE)]

if (length((list_heatmap[[1]][[1]]))>1){
p_heatmap_linda <- heatmap_linda(list_heatmap,colon_taxa_tab)
p_heatmap_linda
}
```

**Dot heatmap**

```{r, fig.width=5, fig.height=25, fig.fullwidth=TRUE}
if (length((list_heatmap[[1]][[1]]))>0){
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,
                                      uni_statistics$colon[grepl(level,names(uni_statistics$colon))],
                                      colon_taxa_tab)
dotheatmap_linda
}
```


#### Phylum level

```{r, warning=FALSE}
level="phylum"
```

```{r, warning=FALSE}
path_maaslin="../intermediate_files/maaslin/Q3/Phylum/"
```

```{r, warning=FALSE}
raw_linda_results_phylum[[segment]] <- list()
linda_results_phylum[[segment]] <- list()
```

Aggregate taxa

```{r, warning=FALSE}
phylum_data <- aggregate_taxa(colon_asv_tab,
                             colon_taxa_tab,
                             taxonomic_level = "Phylum")

colon_phylum_tab <- phylum_data[[1]]
colon_phylum_taxa_tab <- phylum_data[[2]]

```

##### ibd vs no_ibd

```{r, warning=FALSE}
group <- c("no_ibd","ibd")
comparison_name <- paste0(group[1], " vs ",group[2])
```

```{r, echo=FALSE}
comparison_title <- sub("(\\w+) vs (\\w+)", "\\2 and \\1", comparison_name)
```

**linDA**

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}

# prepare the data
linda_data <- binomial_prep(colon_phylum_tab,
                            colon_phylum_taxa_tab,
                            colon_metadata,
                            group, usage="linDA")

filt_colon_uni_data <- linda_data[[1]]
filt_colon_uni_taxa <- linda_data[[2]]
filt_colon_uni_metadata <- linda_data[[3]]

# fit the model
linda.obj <- linda(filt_colon_uni_data, 
                   filt_colon_uni_metadata, 
                   formula = '~ Group * Country + (1|Patient)')

linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)

group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO") 
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")

for (grp in c(group1,group2,group3)){
  raw_linda_results[[segment]][[grp]] <- 
    rawlinda.df(linda.output,
                grp,
                filt_colon_uni_data,
                filt_colon_uni_taxa)
  
  linda_results[[segment]][[grp]] <- 
    linda.df(linda.output,
             grp,
             filt_colon_uni_data,
             filt_colon_uni_taxa)
}

```

```{r, fig.width=15, fig.height=5, fig.fullwidth=TRUE}
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output, group1,
                                taxa_table = filt_colon_uni_taxa) +
              ggtitle(paste(group,collapse=" vs "))

volcano_2  <- volcano_plot_linda(linda.output, group2, 
                                 taxa_table = filt_colon_uni_taxa) + 
              ggtitle("Country effect")

volcano_3 <- volcano_plot_linda(linda.output, group3, 
                                taxa_table = filt_colon_uni_taxa) + 
              ggtitle("Interaction effect")

volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)

# see the plot
volcano
```

**MaAsLin2**

```{r, echo=FALSE,results='hide',message=FALSE,warning=FALSE}
log_file <- file(tempfile(), open = "wt")
sink(log_file)  # Redirect standard output
sink(log_file, type = "message")  # Redirect messages and warnings

fit_data = Maaslin2(
    input_data = filt_colon_uni_data, 
    input_metadata = filt_colon_uni_metadata, min_abundance = 0,
    min_prevalence = 0,min_variance = 0,
    output = file.path(path_maaslin,group1), max_significance = 0.05,
    fixed_effects = c('Group', 'Country'),random_effects = "Patient",
    correction = "BH")

sink()  # Restore standard output
sink(type = "message")  # Restore messages
```

Volcano plot

```{r, warning=FALSE}
volcano1 <- volcano_plot_maaslin(fit_data,filt_colon_uni_taxa) + 
            ggtitle(paste(group[1], "vs", group[2]))

volcano2 <- volcano_plot_maaslin(fit_data,filt_colon_uni_taxa,variable="Country") +
            ggtitle("Country effect")

volcano <- ggarrange(volcano1,volcano2, ncol=2)

# see the results
volcano

```

**Group - Intersection**

```{r, warning=FALSE}
intersection_results <- group_intersection(group, list_intersections, list_venns,
                                           linda.output, fit_data,
                                           raw_linda_results, 
                                                                                      segment = segment,
                                           level=level)

list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]

# show the results
venn
```


**Interaction effect**

```{r, warning=FALSE}
list_interaction_significant <- country_interaction(group,
                                                    linda.output, 
                                                    list_intersections,
                                                    filt_colon_uni_data,
                                                    filt_colon_uni_metadata,
                                                    segment=segment,
                                          level=level)

# see the result
## significant interaction effect
list_interaction_significant[[1]]

## results for czech cohort
list_interaction_significant[[2]]

## results for norwegian cohort
list_interaction_significant[[3]]
```

Removing problematic taxa

```{r, warning=FALSE}
list_intersections <- removing_interaction_problems(group,
                                                    list_interaction_significant,
                                                    list_intersections,
                                                    segment=segment,
                                                    level=level)
```

Basic statistics

```{r, warning=FALSE}
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
                 raw_linda_results[[segment]][[group1]],
                 by="SeqID",all=TRUE)

uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df

# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
```

##### Visualization

Heatmap visualizing the linDA's logFoldChange for taxa with p \< 0.1.

```{r, fig.width=10, fig.height=17, fig.fullwidth=TRUE}
list_heatmap <- list_intersections[grep(paste(segment,level),
                                  names(list_intersections),value=TRUE)]

if (length((list_heatmap[[1]][[1]]))>1){
p_heatmap_linda <- heatmap_linda(list_heatmap,colon_taxa_tab)
p_heatmap_linda
}
```

**Dot heatmap**

```{r, fig.width=5, fig.height=25, fig.fullwidth=TRUE}
if (length((list_heatmap[[1]][[1]]))>0){
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,uni_statistics$colon[grepl(level,names(uni_statistics$colon))],colon_taxa_tab)
dotheatmap_linda
}
```


#### Saving results

```{r, warning=FALSE}
# ALL DATA
saveWorkbook(supplements_wb,file.path(path,paste0("supplements_uni_analysis_wb_",segment,".xlsx")),overwrite = TRUE)

# SIGNIFICANT taxa
write.xlsx(list_intersections[grepl(segment,names(list_intersections))] %>%
            `names<-`(gsub(segment, "", names(
              list_intersections[grepl(segment,names(list_intersections))]))),
           file.path(path,paste0("supplements_significant_taxa_",segment,".xlsx")))
```


## Results overview

#### Alpha diversity

```{r,warning=FALSE}
knitr::kable(pc_observed[[segment]],
             digits = 3,
             caption = "Results of linear model testing ASV Richness")

knitr::kable(pc_shannon[[segment]],
             digits = 3,
             caption = "Results of linear model testing Shannon index")

knitr::kable(pc_simpson[[segment]],
             digits = 3,
             caption = "Results of linear model testing Simpson index")

knitr::kable(pc_pielou[[segment]],
             digits = 3,
             caption = "Results of linear model testing Pielou index")
```

Plots

```{r, fig.width=4, fig.height=5, fig.fullwidth=TRUE}
alpha_div_plots[[paste(segment,"Country")]]
```

#### Beta diversity

**Main results**

```{r,warning=FALSE}
knitr::kable(pairwise_aitchison_raw[[paste("genus", segment)]],
             digits = 3,
             caption = "Results of PERMANOVA - robust aitchison distance")
```

PCA

```{r, fig.width=5, fig.height=3, fig.fullwidth=TRUE, eval=TRUE}
pca_plots_list[[paste(segment,"genus custom")]]
```

**Supplements**

```{r, warning=FALSE}
knitr::kable(supplements_beta[!grepl("PCoA",names(supplements_beta)) & (grepl("genus",names(supplements_beta)))],
             digits = 3,
             caption = "Supplementary PERMANOVA results: Bray-curtis, Jaccard distances")
```

PCA

```{r, fig.width=8, fig.height=7, fig.fullwidth=TRUE, eval=TRUE}
plot_list <- supplements_beta[grepl("PCoA",names(supplements_beta)) &
                              grepl(segment,names(supplements_beta))]

ggarrange(plotlist = plot_list,
          labels=names(plot_list),
          font.label = list(size=5,face="plain"),
          ncol=2,nrow=3)
```

#### Univariate analysis

**Number of significant taxa**

```{r, warning=FALSE}
knitr::kable(as.data.frame(lapply(list_intersections,nrow)) %>% t() %>% 
  `colnames<-`("Count") %>% 
  `rownames<-`(c(names(list_intersections))),caption="Number of significant taxa")
```


# Paper-ready visualizations

## Alpha diversity

```{r, warning=FALSE, fig.width=10, fig.height=4, fig.fullwidth=TRUE}
p_A <- alpha_div_plots$`terminal_ileum Country` +
  ggtitle("Terminal ileum")+
  theme(plot.title = element_text(hjust=0.5,face = "bold",size = 15)) 

p_B <-  alpha_div_plots$`colon Country` +
  ggtitle("Colon") +
  theme(plot.title = element_text(hjust=0.5,face = "bold",size = 15)) 

Q3_alpha <- ggarrange(p_A,ggplot() + theme_minimal(),p_B,nrow=1, ncol=3,
                      widths = c(1,0.1,1))
Q3_alpha
```

## Beta diversity


```{r, warning=FALSE, fig.width=10, fig.height=4, fig.fullwidth=TRUE}
pca_ti <- pca_plots_list$`terminal_ileum genus custom` 
pca_colon <- pca_plots_list$`colon genus custom` 

genus_Q3_beta <- ggarrange(pca_ti,
                           ggplot() + theme_minimal(),
                           pca_colon,ncol=3,
                           widths = c(1,0.1,1))
genus_Q3_beta
```

**Alpha + Beta diversity**

```{r, fig.width=10, fig.height=8, fig.fullwidth=TRUE}
alpha_beta <- ggarrange(Q3_alpha,genus_Q3_beta,
                        ncol = 1,nrow=2,labels = c("A","B"))
alpha_beta
```

## FIGURE 7

```{r, fig.width=10, fig.height=8, fig.fullwidth=TRUE}
alpha_beta <- ggarrange(alpha_beta,ggplot() + theme_minimal(),ncol=2,
                                widths = c(1,0.15))

alpha_beta
```

```{r,results='hide', echo=FALSE}
pdf("../figures/Q3/FIGURE7.pdf",paper = "a4",height = 7,width = 12)
alpha_beta
dev.off()
```

## DAA

```{r,  warning=FALSE, fig.width=10, fig.height=13, fig.fullwidth=TRUE}
if (exists("dot_heatmap_ileum")){
 p_ileum <- dot_heatmap_ileum + 
  ggtitle("Terminal ileum") +
  theme(plot.title = element_text(hjust=0.5,face = "bold",size = 15),
        legend.position = "none") 
}

if (exists("dot_heatmap_colon")){
  p_colon <- dot_heatmap_colon  +
  ggtitle("Colon") +
  theme(plot.title = element_text(hjust=0.5,face = "bold",size = 15),
        legend.position = "none")
}

if (exists("p_ileum") | exists("p_colon")){
  heatmap_plot <- ggarrange(p_ileum,
                          p_colon,
                          ncol = 2,labels=c("A","B"))
  heatmap_plot
}


```

```{r,results='hide', eval=FALSE, echo=FALSE}
pdf("../figures/Q3/supplement_2.pdf",
    height =10,width = 8,paper="a4")
heatmap_plot
dev.off()
```

# Session info

```{r, warning=FALSE}
sessionInfo()
```
