data_df <- data.frame(x=lfc,
y=-1*log10(all.p),
name=output$feature)
View(data_df)
data_df[is.na(data_df$x),] <- 0
data_called <- data_df[called,]
taxa_table <- taxa_table %>% column_to_rownames("SeqID")
data_called$name <- taxa_table[data_called$name,"Genus"]
View(taxa_table)
colnames(taxa_table)
colnames(taxa_table)[ncol(taxa_table)]
colnames(taxa_table)[ncol(taxa_table)]
volcano_plot_maaslin <- function(maaslin_output,taxa_table,cutoff.pval=0.05, cutoff.lfc=1,variable="Group"){
# group effect
output <- maaslin_output$results
output <- output[output$metadata==variable,c(1,4,5,6,8)]
lfc <- output$coef
padj <- output$qval
called <- output[,"qval"] <= cutoff.pval
all.p <- output[,"qval"]
all.col <- rgb(0, 0, 0, 0.2)
data_df <- data.frame(x=lfc,
y=-1*log10(all.p),
name=output$feature)
data_df[is.na(data_df$x),] <- 0
data_called <- data_df[called,]
taxa_table <- taxa_table %>% column_to_rownames("SeqID")
taxonomic_level <- colnames(taxa_table)[ncol(taxa_table)]
data_called$name <- taxa_table[data_called$name,taxonomic_level]
maximum <- max(c(abs(min(data_df$x)), abs(max(data_df$x))))
p <- ggplot(data=data_df, aes(x=x,y=y)) +
geom_point(colour=all.col, shape=19, size=3) + theme_bw() +
xlab("Maaslin2 coefficient") + ylab("-1 * Median Log"[10]~" q value") +
geom_point(data=data_called, aes(x=x,y=y), colour="red", size=3)+
theme(plot.title = element_text(hjust = 0.5,face = "bold",size=15),
axis.title=element_text(size=10)) +
geom_vline(xintercept=1.5, linetype=2, colour="grey")+
geom_vline(xintercept=-1.5, linetype=2, colour="grey")+
coord_cartesian(xlim = c(-maximum,maximum), clip="on") +
geom_hline(yintercept=-1*log10(0.05),linetype=2, colour="grey") +
geom_text_repel(data=data_called, aes(x = x, y = y,
label = name),size=2,max.overlaps = 20)
return(p)
}
volcano1 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa) +
ggtitle(comparison_name)
volcano2 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa,variable="Country") +
ggtitle("Country effect")
volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
volcano
intersection_results <- group_intersection(group, list_intersections, list_venns,
linda.output, fit_data,
raw_linda_results_phylum,
segment = segment,
level=level)
list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]
# show the results
venn
list_interaction_significant <- country_interaction(group,
linda.output,
list_intersections,
filt_ileum_uni_data,
filt_ileum_uni_metadata,
segment=segment,
level=level)
# see the result
## significant interaction effect
list_interaction_significant[[1]]
## results for czech cohort
list_interaction_significant[[2]]
## results for norwegian cohort
list_interaction_significant[[3]]
list_intersections <- removing_interaction_problems(group,
list_interaction_significant,
list_intersections,
segment=segment,
level=level)
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
raw_linda_results_phylum[[segment]][[group1]],
by="SeqID",all=TRUE)
uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df
# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
group <- c("pre_ltx","post_ltx")
comparison_name <- paste0(group[1], " vs ",group[2])
# prepare the data
linda_data <- binomial_prep(ileum_phylum_tab,
ileum_phylum_taxa_tab,
ileum_metadata,
group, usage="linDA")
filt_ileum_uni_data <- linda_data[[1]]
filt_ileum_uni_taxa <- linda_data[[2]]
filt_ileum_uni_metadata <- linda_data[[3]]
# fit the model
linda.obj <- linda(filt_ileum_uni_data,
filt_ileum_uni_metadata,
formula = '~ Group * Country')
linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)
# save the results
group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO")
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")
for (grp in c(group1,group2,group3)){
raw_linda_results_phylum[[segment]][[grp]] <-
rawlinda.df(linda.output,
grp,
filt_ileum_uni_data,
filt_ileum_uni_taxa)
linda_results_phylum[[segment]][[grp]] <-
linda.df(linda.output,
grp,
filt_ileum_uni_data,
filt_ileum_uni_taxa)
}
# summary statistics
# raw_linda_results_genus <- binomial_statistics(filt_ileum_uni_data,
#                                             group=group,
#                                             filt_ileum_uni_metadata,
#                                             raw_linda_results_genus,
#                                             segment = "terminal_ileum")
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output,
group1,
taxa_table = filt_ileum_uni_taxa) +
ggtitle(comparison_name)
volcano_2  <- volcano_plot_linda(linda.output, group2,
taxa_table = filt_ileum_uni_taxa) +
ggtitle("Country effect")
volcano_3 <- volcano_plot_linda(linda.output, group3,
taxa_table = filt_ileum_uni_taxa) +
ggtitle("Interaction")
volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)
fit_data = Maaslin2(
input_data = filt_ileum_uni_data,
input_metadata = filt_ileum_uni_metadata, min_abundance = 0,
min_prevalence = 0,min_variance = 0,
output = file.path(path_maaslin,group1), max_significance = 0.05,
fixed_effects = c('Group', 'Country'),correction = "BH")
volcano1 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa) +
ggtitle(comparison_name)
volcano2 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa,variable="Country") +
ggtitle("Country effect")
volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
intersection_results <- group_intersection(group, list_intersections, list_venns,
linda.output, fit_data,
raw_linda_results_phylum,
segment = segment,
level=level)
list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]
# show the results
venn
list_interaction_significant <- country_interaction(group,
linda.output,
list_intersections,
filt_ileum_uni_data,
filt_ileum_uni_metadata,
segment=segment,
level=level)
# see the result
## significant interaction effect
list_interaction_significant[[1]]
## results for czech cohort
list_interaction_significant[[2]]
## results for norwegian cohort
list_interaction_significant[[3]]
list_intersections <- removing_interaction_problems(group,
list_interaction_significant,
list_intersections,
segment=segment,
level=level)
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
raw_linda_results_phylum[[segment]][[group1]],
by="SeqID",all=TRUE)
uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df
# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
group <- c("healthy","post_ltx")
comparison_name <- paste0(group[1], " vs ",group[2])
# prepare the data
linda_data <- binomial_prep(ileum_phylum_tab,
ileum_phylum_taxa_tab,
ileum_metadata,
group, usage="linDA")
filt_ileum_uni_data <- linda_data[[1]]
filt_ileum_uni_taxa <- linda_data[[2]]
filt_ileum_uni_metadata <- linda_data[[3]]
# fit the model
linda.obj <- linda(filt_ileum_uni_data,
filt_ileum_uni_metadata,
formula = '~ Group * Country')
linda.output <- linda.obj$output
linda.output <- linda_renaming(linda.output, group)
# save the results
group1 <- paste0(group[1], " vs ","Group",group[2])
group2 <- paste0(group[1], " , ",group[2], " - CZ vs NO")
group3 <- paste0(group[1], " vs ","Group",group[2], ":CountryNO")
for (grp in c(group1,group2,group3)){
raw_linda_results_phylum[[segment]][[grp]] <-
rawlinda.df(linda.output,
grp,
filt_ileum_uni_data,
filt_ileum_uni_taxa)
linda_results_phylum[[segment]][[grp]] <-
linda.df(linda.output,
grp,
filt_ileum_uni_data,
filt_ileum_uni_taxa)
}
# summary statistics
# raw_linda_results_genus <- binomial_statistics(filt_ileum_uni_data,
#                                             group=group,
#                                             filt_ileum_uni_metadata,
#                                             raw_linda_results_genus,
#                                             segment = "terminal_ileum")
# volcano plot
volcano_1 <- volcano_plot_linda(linda.output,
group1,
taxa_table = filt_ileum_uni_taxa) +
ggtitle(comparison_name)
volcano_2  <- volcano_plot_linda(linda.output, group2,
taxa_table = filt_ileum_uni_taxa) +
ggtitle("Country effect")
volcano_3 <- volcano_plot_linda(linda.output, group3,
taxa_table = filt_ileum_uni_taxa) +
ggtitle("Interaction")
volcano <- ggarrange(volcano_1,volcano_2,volcano_3, ncol=3)
fit_data = Maaslin2(
input_data = filt_ileum_uni_data,
input_metadata = filt_ileum_uni_metadata, min_abundance = 0,
min_prevalence = 0,min_variance = 0,
output = file.path(path_maaslin,group1), max_significance = 0.05,
fixed_effects = c('Group', 'Country'),correction = "BH")
volcano1 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa) +
ggtitle(comparison_name)
volcano2 <- volcano_plot_maaslin(fit_data,filt_ileum_uni_taxa,variable="Country") +
ggtitle("Country effect")
volcano <- ggarrange(volcano1,volcano2, ncol=2)
volcano
intersection_results <- group_intersection(group, list_intersections, list_venns,
linda.output, fit_data,
raw_linda_results_phylum,
segment = segment,
level=level)
list_intersections <- intersection_results[[1]]
list_venns <- intersection_results[[2]]
venn <- intersection_results[[3]]
# show the results
venn
list_interaction_significant <- country_interaction(group,
linda.output,
list_intersections,
filt_ileum_uni_data,
filt_ileum_uni_metadata,
segment=segment,
level=level)
# see the result
## significant interaction effect
list_interaction_significant[[1]]
## results for czech cohort
list_interaction_significant[[2]]
## results for norwegian cohort
list_interaction_significant[[3]]
list_intersections <- removing_interaction_problems(group,
list_interaction_significant,
list_intersections,
segment=segment,
level=level)
uni_df <-  merge(basic_univariate_statistics(linda_data,group),
raw_linda_results_phylum[[segment]][[group1]],
by="SeqID",all=TRUE)
uni_df[["final_sig"]] <- uni_df$SeqID %in% list_intersections[[paste(segment,level,comparison_name)]][["SeqID"]]
uni_statistics[[segment]][[paste(level,comparison_name)]] <- uni_df
# for comparison
new_name <- paste(level,comparison_name)
addWorksheet(supplements_wb, sheetName = new_name)
writeData(supplements_wb, sheet = new_name, uni_df, rowNames=FALSE)
list_heatmap <- list_intersections[grep(paste(segment,level),
names(list_intersections),value=TRUE)]
p_heatmap_linda <- heatmap_linda(list_heatmap,ileum_taxa_tab)
p_heatmap_linda
dotheatmap_linda <- dot_heatmap_linda(list_heatmap,
uni_df,
ileum_taxa_tab)
dotheatmap_linda
A <- list_intersections[[paste(segment,level,"healthy vs pre_ltx")]]$SeqID
B <- list_intersections[[paste(segment,level,"healthy vs post_ltx")]]$SeqID
C <- intersect(A,B)
psc_effect[[paste(segment,level)]] <- list_intersections[[paste(segment,level, "healthy vs pre_ltx")]][list_intersections[[paste(segment,level, "healthy vs pre_ltx")]]$SeqID %in% C,]
# see the results
psc_effect[[paste(segment,level)]]
saveWorkbook(supplements_wb,file.path(path,paste0("supplements_uni_analysis_wb_",segment,".xlsx")))
write.xlsx(psc_effect,
file.path(path,paste0("supplements_psc_effect_",segment,".csv")),
row.names = FALSE)
model="enet"
level="ASV"
group <- c("pre_ltx","healthy")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"ASV terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_asv_tab,
ileum_taxa_tab,
ileum_metadata,
group, usage="ml_clr")
# fit the model
enet_model <- glmnet_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group",
N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC curve
roc_c <- roc_curve(enet_model, group)
# save the results
models_summ <- list()
models_cm <- list()
betas <- list()
roc_cs <- list()
models_summ[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$model_summary
models_cm[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$conf_matrices$original
roc_cs[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$kfold_rocobjs
betas[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- as.matrix(enet_model$betas)
# see the results
enet_model$model_summary %>% t()
enet_model$conf_matrices
enet_model$plot
roc_c
group <- c("pre_ltx","post_ltx")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"ASV terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_asv_tab,
ileum_taxa_tab,
ileum_metadata,
group,
usage="ml_clr")
# fit the model
enet_model <- glmnet_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group",
N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC
roc_c <- roc_curve(enet_model, group)
# save the results
models_summ[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$model_summary
models_cm[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$conf_matrices$original
roc_cs[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$kfold_rocobjs
betas[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- as.matrix(enet_model$betas)
# see the results
enet_model$model_summary %>% t()
enet_model$conf_matrices
enet_model$plot
roc_c
group <- c("post_ltx","healthy")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"ASV terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_asv_tab,
ileum_taxa_tab,
ileum_metadata,
group,
usage="ml_clr")
# fit the model
enet_model <- glmnet_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group",
N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC
roc_c <- roc_curve(enet_model, group)
# save the results
models_summ[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$model_summary
models_cm[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$conf_matrices$original
roc_cs[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- enet_model$kfold_rocobjs
betas[[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- as.matrix(enet_model$betas)
# see the results
enet_model$model_summary %>% t()
enet_model$conf_matrices
enet_model$plot
roc_c
level="genus"
genus_data <- aggregate_taxa(ileum_asv_tab,
ileum_taxa_tab,
taxonomic_level = "Genus")
ileum_genus_tab <- genus_data[[1]]
ileum_genus_taxa_tab <- genus_data[[2]]
group <- c("pre_ltx","healthy")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"Genus terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_genus_tab,
ileum_genus_taxa_tab,
ileum_metadata,
group,
usage="ml_clr")
# fit the model
enet_model <- glmnet_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group",
N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC
roc_c <- roc_curve(enet_model, group)
# save the results
models_summ[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$model_summary
models_cm[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$conf_matrices$original
roc_cs[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$kfold_rocobjs
betas[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- as.matrix(enet_model$betas)
# see the results
enet_model$model_summary %>% t()
enet_model$conf_matrices
enet_model$plot
roc_c
group <- c("pre_ltx","post_ltx")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"Genus terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_genus_tab,
ileum_genus_taxa_tab,
ileum_metadata,
group,
usage="ml_clr")
# fit the model
enet_model <- glmnet_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group", N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC
roc_c <- roc_curve(enet_model, group)
# save the results
models_summ[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$model_summary
models_cm[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$conf_matrices$original
roc_cs[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$kfold_rocobjs
betas[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- as.matrix(enet_model$betas)
# see the results
enet_model$model_summary %>% t()
enet_model$conf_matrices
enet_model$plot
roc_c
group <- c("post_ltx","healthy")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"Genus terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_genus_tab,
ileum_genus_taxa_tab,
ileum_metadata,group,
usage="ml_clr")
# fit the model
enet_model <- glmnet_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group",
N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC
roc_c <- roc_curve(enet_model, group)
# save the results
models_summ[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$model_summary
models_cm[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$conf_matrices$original
roc_cs[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- enet_model$kfold_rocobjs
betas[[paste(group[1],"vs",group[2],"Genus terminal_ileum")]] <- as.matrix(enet_model$betas)
# see the results
enet_model$model_summary %>% t()
enet_model$conf_matrices
enet_model$plot
roc_c
model="knn"
level="ASV"
group <- c("pre_ltx","healthy")
comparison_name <- paste0(group[1], " vs ",group[2])
model_name <- paste(group[1],"vs",group[2],"ASV terminal_ileum")
# prepare the data
filt_ileum_uni_data <- binomial_prep(ileum_asv_tab,
ileum_taxa_tab,
ileum_metadata,
group, usage="ml_clr")
# fit the model
knn_model <- knn_binomial(filt_ileum_uni_data,
sample_method = "atypboot",
outcome="Group",
N=10,
reuse=TRUE,
file=model_name,
Q="Q1")
# ROC curve
roc_c <- roc_curve(knn_model, group)
# save the results
supplements[["models_summ"]][["knn"]][[paste(group[1],"vs",group[2],"ASV terminal_ileum")]] <- knn_model$model_summary
